import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as s,b as h,d as e,e as a,o as l}from"./app-CV2M5tcU.js";const k={};function p(d,i){return l(),n("div",null,[i[0]||(i[0]=s("h1",{id:"前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前言"},[s("span",null,"前言")])],-1)),i[1]||(i[1]=s("p",null,[a("学习 Python 官方的 "),s("a",{href:"https://docs.python.org/zh-cn/3.14/tutorial/index.html",target:"_blank",rel:"noopener noreferrer"},"Python3 tutorial 中文版"),a(" 前六章，主要包括函数、数据结构、模块与包。")],-1)),h(" more "),i[2]||(i[2]=e(`<p>[[Python 入门(1)]]</p><h1 id="_7-输入与输出" tabindex="-1"><a class="header-anchor" href="#_7-输入与输出"><span>7. 输入与输出</span></a></h1><h2 id="f-字符串" tabindex="-1"><a class="header-anchor" href="#f-字符串"><span>f-字符串</span></a></h2><p>格式化字符串字面值（简称为 f-字符串）在字符串前加前缀 <code>f</code> 或 <code>F</code>，通过 <code>{expression}</code> 表达式，把 Python 表达式的值添加到字符串内。</p><p>格式说明符是可选的，写在表达式后面，可以更好地控制格式化值的方式：</p><ul><li>确定小数点前后的位置，如 <code>f&#39;The number is |{num:&lt;4.2f}|.&#39;</code><ul><li><code>&lt;</code> 标示左对齐，类似的还有右对齐 <code>&gt;</code>、居中 <code>^</code></li><li>小数点前的 4 表示字段宽度指定为 4 个字符</li><li>小数点后的 2f 表示小数点保留 2 位</li></ul></li><li>在 <code>&#39;:&#39;</code> 后传递整数，为该字段设置最小字符宽度，常用于列对齐。整数为负数时，显示为右对齐，否则左对齐</li><li><code>=</code> 说明符可被用于将一个表达式扩展为表达式文本、等号再加表达式求值结果的形式</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # = 说明符</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bugs, count, area </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;roaches&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">13</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;living room&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Debugging </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bugs</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">count</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">area</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Debugging bugs</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;roaches&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">13</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> area</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;living room&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="format-方法" tabindex="-1"><a class="header-anchor" href="#format-方法"><span>format()方法</span></a></h2><p>字符串 <code>format()</code> 方法有点类似 f-字符串：把 f 和 <code>{}</code> 里的值都放到字符串的后面。不过 format() 方法更为灵活，可以像调用函数那样，既可以使用位置参数，也可以用关键字参数。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 位置</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{0}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> and </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{1}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;spam&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;eggs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">spam </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> eggs</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{1}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> and </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{0}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;spam&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;eggs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">eggs </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> spam</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 关键字</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;This </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{food}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{adjective}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">food</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;spam&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">adjective</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;absolutely horrible&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">This spam </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> absolutely horrible.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 混合使用</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;The story of </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{0}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{1}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, and </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{other}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Bill&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Manfred&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">other</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Georg&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">The story of Bill, Manfred, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Georg.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特别的，format() 方法可以将 <code>table</code> 字典作为采用 <code>**</code> 标记的关键字参数传入。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Sjoerd&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4127</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Jack&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4098</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Dcab&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8637678</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Jack: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{Jack</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">:d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">; Sjoerd: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{Sjoerd</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">:d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">; Dcab: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{Dcab</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">:d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(**table))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Jack: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4098</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; Sjoerd: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4127</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; Dcab: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8637678</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="printf-风格" tabindex="-1"><a class="header-anchor" href="#printf-风格"><span>printf 风格</span></a></h2><p>printf 风格的字符串格式化是旧时的输出方法。</p><p>给定 <code>format % values</code> (其中 <em>format</em> 是一个字符串)，则 <em>format</em> 中的 <code>%</code> 转换占位符将以 <em>values</em> 中的零个或多个元素来替换。 此操作通常称为字符串插值。 例如 <code>&#39;The value of pi is approximately %5.3f.&#39; % math.pi</code>。</p><h2 id="读写文件" tabindex="-1"><a class="header-anchor" href="#读写文件"><span>读写文件</span></a></h2><p><code>open()</code> 返回一个文件对象 ，最常用的是两个位置参数和一个关键字参数：<code>f = open(filename, mode, encoding=None)</code>。</p><ul><li><code>filename</code> 是文件名字符串</li><li><code>mode</code> 是包含描述文件使用方式字符的字符串。 <ul><li>文本模式下，mode 的值包括 <code>&#39;r&#39;</code> （读取文件）、<code>&#39;w&#39;</code> （覆盖写入文件）、<code>&#39;a&#39;</code> （追加文件）、<code>&#39;r+&#39;</code> （读写文件，文件须已存在）、<code>w+</code> （读写文件，不存在则创建）。mode 默认值为 <code>&#39;r&#39;</code></li><li>二进制模式下，mode 包含 <code>&#39;b&#39;</code> ，但 <code>&#39;b&#39;</code> 不能单独使用，需要与文本模式下的 mode 组合使用：<code>rb wb ab rb+ wb+</code></li></ul></li><li><code>encoding</code> 是文本文件的编码标准。对于二进制文件，该参数无用</li></ul><p>用 open() 打开文件，完成文件操作后，需要用 <code>close()</code> 方法对文件进行关闭。可以用 <code>with</code> 关键字实现自动关闭文件。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在 with 下完成文件所有操作，离开 with 后文件自动关闭</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;workfile&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">encoding</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;utf-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    read_data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中的 <code>f.read()</code> 读取文件中的所有内容，并返回字符串（文本模式），或字节串对象（在二进制模式下）。该方法有一个可选参数 <em>size</em> 。省略 <em>size</em> 或 <em>size</em> 为负数时，读取并返回整个文件的内容；<em>size</em> 取其他值时，读取并返回最多 <em>size</em> 个字符（文本模式）或 <em>size</em> 个字节（二进制模式）。如已到达文件末尾，<code>f.read()</code> 返回空字符串。</p><p><code>f.readline()</code> 和 <code>f.read()</code> 十分类似：都能读取到每行之间的换行符，但前者是按行读取，后者默认读取全部。不想读取到换行符且想一次性读取多行，可以用循环遍历整个文件对象，代码如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> line </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(line, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>f.readlines()</code> 就是边循环遍历文件对象，边把 <code>f.readline()</code> 读取到的字符串添加到一个空列表。遍历完毕，返回这个列表。</p><p><code>f.write(string)</code> 把 string 的内容写入文件，并返回写入的字符数（包括换行符）。写入其他类型的对象前，要先把它们转化为字符串（文本模式）或字节对象（二进制模式）。</p><p><code>f.tell()</code> 返回整数，给出文件对象在文件中的当前位置。我记得 C 语言有一个文件指针，负责跟踪在文件中的当前读写位置。</p><p><code>f.seek(offset, whence)</code> 改变文件对象的位置。通过向参考点添加 <em>offset</em> 计算位置；参考点由 <em>whence</em> 参数指定。 <em>whence</em> 值为 0 表示从文件开头计算，1 表示使用当前文件位置，2 表示使用文件末尾作为参考点，默认值为 0，即从头再读取。</p><p>JSON (JavaScript Object Notation)数据格式，可以用来方便的进行数据交换和网络传输。将用户编码需要的数据转换为 JSON 格式的过程，是为序列化过程；JSON 格式还原回去，就是逆序列化。</p><ul><li><code>json.dumps(x)</code> 查看数据 x 的 JSON 格式是什么样</li><li><code>json.dump(x, f)</code> 将数据 x 序列化为文本文件 f</li><li><code>json.load(f)</code> 将文本文件或二进制文件 f 逆序列化回数据</li></ul><p>这种简单的序列化技术可以处理列表和字典，但在 JSON 中序列化任意类的实例，则需要付出额外努力。<a href="https://docs.python.org/zh-cn/3.14/library/json.html#module-json" title="json: Encode and decode the JSON format." target="_blank" rel="noopener noreferrer"><code>json</code></a> 模块的参考包含对此的解释。</p><h1 id="_8-异常" tabindex="-1"><a class="header-anchor" href="#_8-异常"><span>8. 异常</span></a></h1>`,31))])}const g=t(k,[["render",p]]),A=JSON.parse('{"path":"/programming%20languagae/Python%20%E5%85%A5%E9%97%A8(2).html","title":"Python 入门(2)","lang":"zh-CN","frontmatter":{"title":"Python 入门(2)","date":"2025-10-10T00:00:00.000Z","tags":["Python","官方教程"],"category":["编程语言"],"description":"学习 Python 官方的 Python3 tutorial 中文版 前六章，主要包括函数、数据结构、模块与包。","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 入门(2)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-12T15:10:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"庸碌无常\\",\\"url\\":\\"https://pluinyiasnhg.top\\"}]}"],["meta",{"property":"og:url","content":"https://pluinyiasnhg.top/programming%20languagae/Python%20%E5%85%A5%E9%97%A8(2).html"}],["meta",{"property":"og:site_name","content":"庸碌无常的博客"}],["meta",{"property":"og:title","content":"Python 入门(2)"}],["meta",{"property":"og:description","content":"学习 Python 官方的 Python3 tutorial 中文版 前六章，主要包括函数、数据结构、模块与包。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-12T15:10:42.000Z"}],["meta",{"property":"article:tag","content":"官方教程"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:published_time","content":"2025-10-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-12T15:10:42.000Z"}]]},"git":{"createdTime":1760281842000,"updatedTime":1760281842000,"contributors":[{"name":"pluinyiasnhg","username":"pluinyiasnhg","email":"pluinyiasnhg@gmail.com","commits":1,"url":"https://github.com/pluinyiasnhg"}]},"readingTime":{"minutes":4.82,"words":1446},"filePathRelative":"programming languagae/Python 入门(2).md","excerpt":"\\n<p>学习 Python 官方的 <a href=\\"https://docs.python.org/zh-cn/3.14/tutorial/index.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Python3 tutorial 中文版</a> 前六章，主要包括函数、数据结构、模块与包。</p>\\n","autoDesc":true}');export{g as comp,A as data};
