import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as s,b as e,o as l}from"./app-DPSJh4D9.js";const t={};function h(p,i){return l(),n("div",null,[i[0]||(i[0]=s('<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>学习 Python 官方的 <a href="https://docs.python.org/zh-cn/3.14/tutorial/index.html" target="_blank" rel="noopener noreferrer">Python3 tutorial 中文版</a>。有关该文档的介绍如下：</p><blockquote><p>本教程对每一个功能的介绍并不完整，甚至没有涉及全部常用功能，只是介绍了 Python 中最值得学习的功能，旨在让读者快速感受一下 Python 的特色。学完本教程的读者可以阅读和编写 Python 模块和程序，也可以继续学习 <a href="https://docs.python.org/zh-cn/3.14/library/index.html#library-index" target="_blank" rel="noopener noreferrer">Python 标准库</a>。<br> 标准库与模块的内容详见 <a href="https://docs.python.org/zh-cn/3.14/library/index.html#library-index" target="_blank" rel="noopener noreferrer">Python 标准库</a>。<a href="https://docs.python.org/zh-cn/3.14/reference/index.html#reference-index" target="_blank" rel="noopener noreferrer">Python 语言参考手册</a> 是更正规的语言定义。</p></blockquote>',3)),e(" more "),i[1]||(i[1]=s(`<h1 id="_1-课前甜点" tabindex="-1"><a class="header-anchor" href="#_1-课前甜点"><span>1. 课前甜点</span></a></h1><p>目前 Python 3.8 及之前的版本已经 EOL，大概是 End Of Life 的意思；3.10 到 3.12 还在维护中；3.13 是稳定版；3.14 是先行版；3.15 是正在开发中。</p><p>Python 容易上手，在完成一些琐碎的日常小任务时，能非常高效的完成。相比于 C 语言，Python 是一门更高级的语言，内置了高级数据类型，比如动态数组和字典。此外，Python 大量的通用数据类型使得 Python 在解决更大问题时丝毫不弱于 awk、Perl。</p><p>模块（module）：Python 允许将程序分成一个个模块来管理和复用。</p><p>使用 Python 实现功能的代码量通常要比 C++、Java 等语言的代码量要少，原因有：</p><ul><li>Python 内置的高级数据类型，能用一条语句实现更复杂的功能</li><li>Python 通过缩进而不是括号来管理语句</li><li>无需声明变量</li></ul><h1 id="_2-使用-python-解释器" tabindex="-1"><a class="header-anchor" href="#_2-使用-python-解释器"><span>2. 使用 Python 解释器</span></a></h1><p>python 解释器的安装路径通常在 <code>/usr/share/bin</code> 路径下面，在 shell 中输入 <code>python</code> 就能启动解释器，想要退出解释器，可以输入 <code>quit()</code> 或者快捷键 <code>Ctrl-d</code>（Linux）、<code>Ctrl-z</code>（Windows）。</p><p>如果使用 miniconda 管理 python 虚拟环境，默认的 base 环境在 <code>[安装路径]/miniconda3</code> 下面，其他虚拟环境在 <code>[安装路径]/miniconda3/env/[环境名]</code> 。可以在 shell 中用 <code>conda env list</code> 查看。</p><p>启动解释器时候，可以传递参数，比如 <code>-i</code> 在运行脚本文件的同时进入交互模式，<code>-c</code> 后接命令，<code>-m</code> 后接模块名。更多的参数详见<a href="https://docs.python.org/3/using/cmdline.html#using-on-general" target="_blank" rel="noopener noreferrer">命令行和环境</a>。</p><p>解释器读取命令行参数，把脚本名与其他参数转化为字符串列表存到 <code>sys</code> 模块的 <code>argv</code> 变量里。</p><ul><li>未给定输入参数时，<code>sys.argv[0]</code> 是空字符串</li><li>给定脚本名是 <code>&#39;-&#39;</code> （标准输入）时，<code>sys.argv[0]</code> 是 <code>&#39;-&#39;</code></li><li>使用 <a href="https://docs.python.org/zh-cn/3.14/using/cmdline.html#cmdoption-c" target="_blank" rel="noopener noreferrer"><code>-c</code></a> 时，<code>sys.argv[0]</code> 是 <code>&#39;-c&#39;</code></li><li>使用 <a href="https://docs.python.org/zh-cn/3.14/using/cmdline.html#cmdoption-m" target="_blank" rel="noopener noreferrer"><code>-m</code></a> 时，<code>sys.argv[0]</code> 就是包含目录的模块全名</li><li>解释器不处理 <a href="https://docs.python.org/zh-cn/3.14/using/cmdline.html#cmdoption-c" target="_blank" rel="noopener noreferrer"><code>-c</code></a> 或 <a href="https://docs.python.org/zh-cn/3.14/using/cmdline.html#cmdoption-m" target="_blank" rel="noopener noreferrer"><code>-m</code></a> 之后的选项，而是直接留在 <code>sys.argv</code> 中由命令或模块来处理</li></ul><p>默认情况下，python 源代码文件是以 UTF-8 格式编码，这种编码支持世界上大多数语言的字符。如果想要指定其他编码格式，则要声明文件的编码，在源代码文件的第一行添加特殊注释，格式如下。其中，encoding 可以是 Python 支持的任意一种 <a href="https://docs.python.org/zh-cn/3.14/library/codecs.html#module-codecs" title="codecs: Encode and decode data and streams." target="_blank" rel="noopener noreferrer">codecs</a>。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -*- coding: encoding -*-</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第一行的规则也有一种例外情况，源码以 <a href="https://docs.python.org/zh-cn/3.14/tutorial/appendix.html#tut-scripts" target="_blank" rel="noopener noreferrer">UNIX &quot;shebang&quot; 行</a> 开头。此时，编码声明要写在文件的第二行。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/usr/bin/env python3</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -*- coding: cp1252 -*-</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_3-python-速览" tabindex="-1"><a class="header-anchor" href="#_3-python-速览"><span>3. Python 速览</span></a></h1><p>除法运算 (<code>/</code>) 总是返回浮点数。 如果要做 <a href="https://docs.python.org/zh-cn/3.14/glossary.html#term-floor-division" target="_blank" rel="noopener noreferrer">floor division</a> 得到一个整数结果，可以使用 <code>//</code> 运算符；要计算余数你可以使用 <code>%</code> 。</p><p>Python 用 <code>**</code> 运算符计算乘方。</p><p>交互模式下，上次输出的表达式会赋给变量 <code>_</code>。把 Python 当作计算器时，用该变量实现下一步计算更简单。</p><blockquote><p>[!warning]<br> 最好把变量 <code>_</code> 当作只读类型。不要为它显式赋值，否则会创建一个同名独立局部变量，该变量会用它的魔法行为屏蔽内置变量。</p></blockquote><p>原始字符串。如果不希望前置 <code>\\</code> 的字符转义成特殊字符，可以使用原始字符串，在引号前添加 <code>r</code> 即可：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;C:\\some</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ame&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 这里 \\n 表示换行符！</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">C:\\</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">some</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ame</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">r</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&#39;C:\\some</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">ame&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 请注意引号前的 r</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">C:\\</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">some\\name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串字面值可以跨越多行。 一种做法是使用三重引号: <code>&quot;&quot;&quot;...&quot;&quot;&quot;</code> 或 <code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>。 行结束符会自动包括在字符串中，但可以通过在行尾添加 <code>\\</code> 来避免此行为。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">... python</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">... &quot;&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">python</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">\\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">... python</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">... &quot;&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">python</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相邻的两个或多个 <em>字符串字面值</em> （引号标注的字符）会自动合并。拼接分隔开的长字符串时，这个功能特别实用。</p><p>自动合并功能只能用于两个字面值，不能用于变量或表达式。合并多个变量，或合并变量与字面值，要用 <code>+</code> 。</p><p>Python 字符串的其他操作：</p><ul><li>可以进行索引和切片操作。索引有越界报错，但切片会自动处理越界索引</li><li>字符串不能修改</li><li>内置函数 <a href="https://docs.python.org/zh-cn/3.14/library/functions.html#len" title="len" target="_blank" rel="noopener noreferrer"><code>len()</code></a> 返回字符串的长度</li></ul><p>Python 列表也支持索引和切片、返回自身的长度。</p><p>此外，列表中的元素可修改：</p><ul><li>可添加新元素，比如 <code>list.append()</code> 方法在列表末尾添加新元素</li><li>通过赋值删除元素，比如 <code>mylist[2:5] = []</code></li><li>通过赋值更改元素，比如 <code>mylist[0] = 0</code></li></ul><h1 id="_4-更多控制流工具" tabindex="-1"><a class="header-anchor" href="#_4-更多控制流工具"><span>4. 更多控制流工具</span></a></h1><ul><li><code>if</code> 语句。可有零个或多个 <code>elif</code> 部分，<code>else</code> 部分也是可选的。关键字 <code>elif</code> 是 else if 的缩写</li><li><code>for</code> 语句。Python 的 <code>for</code> 语句不迭代算术递增数值（如 Pascal），或是给予用户定义迭代步骤和结束条件的能力（如 C），而是在列表或字符串等任意序列的元素上迭代，按它们在序列中出现的顺序</li><li><code>range()</code> 用于生成等差数列</li><li><code>break</code> 语句将跳出最近的一层 for 或 while 循环</li><li><code>continue</code> 语句将继续执行循环的下一次迭代</li><li>在 <code>for</code> 或 <code>while</code> 循环中 <code>break</code> 语句可能对应一个 <code>else</code> 子句。 如果循环在未执行 <code>break</code> 的情况下结束，<code>else</code> 子句将会执行</li><li><code>pass</code> 语句不执行任何动作。常用于创建最小的类和用作函数或条件语句体的占位符</li></ul><p>Python 3.10 引入的 <a href="https://docs.python.org/zh-cn/3.14/reference/compound_stmts.html#match" target="_blank" rel="noopener noreferrer"><code>match</code></a> 表面上像 C中的 switch 语句，但其实它更像 Rust 中的模式匹配。</p><ol><li><strong>匹配顺序</strong>：按顺序匹配，第一个匹配的模式会被执行</li><li><strong>通配符</strong>：<code>_</code> 是通配符，匹配任何值</li><li><strong>变量绑定</strong>：在模式中可以使用变量来绑定值</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> subject:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pattern1:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 处理 pattern1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pattern2:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 处理 pattern2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 默认情况</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 的 <code>match</code> 语句提供了强大的模式匹配功能，可以：</p><ul><li>匹配简单的值和多个值</li><li>匹配序列、映射和对象</li><li>使用守卫条件进行更复杂的匹配</li><li>提取和绑定变量</li></ul><p>函数内的第一条语句是字符串时，该字符串就是文档字符串，也称为 <em>docstring</em>。利用文档字符串可以自动生成在线文档或打印版文档，还可以让开发者在浏览代码时直接查阅文档。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> my_function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;第一行应为对象用途的简短摘要。为保持简洁，不要在这里显式说明对象名或类型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    后面的行可包含若干段落，描述对象的调用约定、副作用等</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my_function.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__doc__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编码风格：</p><ul><li>缩进，用 4 个空格，不要用制表符。</li><li>换行，一行不超过 79 个字符。这样换行的小屏阅读体验更好，还便于在大屏显示器上并排阅读多个代码文件。</li><li>用空行分隔函数和类，及函数内较大的代码块。</li><li>最好<strong>把注释放到单独一行</strong>。</li><li><strong>使用文档字符串</strong>。</li><li>运算符前后、逗号后要用空格，但不要直接在括号内使用： <code>a = f(1, 2) + g(3, 4)</code>。</li><li>类和函数的命名要一致；按惯例，命名类用 <code>UpperCamelCase</code>，命名函数与方法用 <code>lowercase_with_underscores</code>。命名方法中第一个参数总是用 <code>self</code> (类和方法详见 <a href="https://docs.python.org/zh-cn/3.14/tutorial/classes.html#tut-firstclasses" target="_blank" rel="noopener noreferrer">初探类</a>)。</li><li>编写用于国际多语环境的代码时，不要用生僻的编码。Python 默认的 UTF-8 或纯 ASCII 可以胜任各种情况。</li><li>同理，就算多语阅读、维护代码的可能再小，也不要在标识符中使用非 ASCII 字符。</li></ul><h2 id="有关函数参数" tabindex="-1"><a class="header-anchor" href="#有关函数参数"><span>有关函数参数</span></a></h2><p>为参数指定默认值。调用函数时，可以使用比定义时更少的参数。默认值一般只计算一次，但当默认值为列表、字典或类实例等可变对象时，会产生与该规则不同的结果。例如，下面的函数会累积后续调用时传递的参数：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    L.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> L</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [1]</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [1, 2]</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [1, 2, 3]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不想在后续调用之间共享默认值时，需要每次给可边对象清空。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> L </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        L </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    L.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> L</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用函数时可以用形如 <code>kwarg=value</code> 的关键字参数。同时有位置参数和关键字参数时，位置参数写在关键字参数前面，因为关键字参数不要求位置。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">parrot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)                                          </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1 个位置参数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">parrot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">voltage</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)                                  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1 个关键字参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>还有 <code>*arguments</code> 和 <code>**keywords</code> 形参。<code>*arguments</code> 接收一个元组，该元组包含除形参列表之外的<strong>位置参数</strong>；<code>**keywords</code> 接收一个字典，该字典包含与函数中已定义形参对应之外的所有<strong>关键字参数</strong>。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> cheeseshop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">arguments</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> **</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">keywords</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">cheeseshop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Limburger&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;It&#39;s very runny, sir.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">           &quot;It&#39;s really very, VERY runny, sir.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">           shopkeeper</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Michael Palin&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">           client</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;John Cleese&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">           sketch</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Cheese Shop Sketch&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，kind 的实参是 Limburger，<code>*arguments</code> 元组包括剩下两个位置实参，<code>**keywords</code> 字典包括剩下三个关键字实参。</p><blockquote><p>[!warning]<br><code>*args</code> 形参后的任何形参，只能是关键字参数。</p></blockquote><p>为了让代码易读、高效，最好限制参数的传递方式，这样，开发者只需查看函数定义，即可确定参数项是仅按位置、按位置或关键字，还是仅按关键字传递。函数定义如下：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):</span></span>
<span class="line"><span>      -----------    ----------     ----------</span></span>
<span class="line"><span>        |             |                  |</span></span>
<span class="line"><span>        |        位置或关键字             |</span></span>
<span class="line"><span>        |                                - 仅限关键字</span></span>
<span class="line"><span>         -- 仅限位置</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/</code> 和 <code>*</code> 是可选的。这些符号表明形参如何把参数值传递给函数：位置、位置或关键字、关键字。关键字形参也叫作命名形参。</p><p>解包实参列表。用 <code>*</code> 操作符把实参从列表或元组解包出来，字典可以用 <code>**</code> 操作符传递关键字参数：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">args </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*args))            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 附带从一个列表解包的参数的调用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> parrot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">voltage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;a stiff&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;voom&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    pass</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;voltage&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;four million&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;state&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;bleedin&#39; demised&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;action&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;VOOM&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">parrot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(**d)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数注解是可选的用户自定义函数类型的元数据完整信息。 下面的示例具有加了标注的一个必需参数、一个可选参数以及返回值:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">ham</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> eggs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;eggs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">     print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Annotations:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, f.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__annotations__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">     print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Arguments:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ham, eggs)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ham </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; and &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> eggs</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;spam&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Annotations: {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ham&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;str&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;eggs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;str&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;return&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;str&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Arguments: spam eggs</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;spam and eggs&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_5-数据结构" tabindex="-1"><a class="header-anchor" href="#_5-数据结构"><span>5. 数据结构</span></a></h1><h2 id="列表" tabindex="-1"><a class="header-anchor" href="#列表"><span>列表</span></a></h2><p>列表数据类型支持很多方法，列表对象的所有方法所示如下：</p><ul><li>list.append(<em>x</em>) <ul><li>在列表末尾添加一项。 类似于 <code>a[len(a):] = [x]</code>。</li></ul></li><li>list.extend(<em>iterable</em>) <ul><li>通过添加来自 iterable 的所有项来扩展列表。 类似于 <code>a[len(a):] = iterable</code>。</li></ul></li><li>list.insert(<em>i</em>, <em>x</em>) <ul><li>在指定位置插入元素。第一个参数是插入元素的索引</li></ul></li><li>list.remove(<em>x</em>) <ul><li>从列表中删除第一个值为 <em>x</em> 的元素</li></ul></li><li>list.pop([<em>i</em>]) <ul><li>移除列表中给定位置上的条目，并返回该条目。 如果未指定索引号，则 <code>a.pop()</code> 将移除并返回列表中的最后一个条目</li></ul></li><li>list.clear() <ul><li>移除列表中的所有项。 类似于 <code>del a[:]</code>。</li></ul></li><li>list.index(<em>x</em>[, <em>start</em>[, <em>end</em>]]) <ul><li>返回列表中 <em>x</em> 首次出现位置的从零开始的索引。可选参数 <em>start</em> 和 <em>end</em> 是切片符号，用于将搜索限制为列表的特定子序列。返回的索引是相对于整个序列的开始计算的，而不是 <em>start</em> 参数。</li></ul></li><li>list.count(<em>x</em>) <ul><li>返回列表中元素 <em>x</em> 出现的次数。</li></ul></li><li>list.sort(<em>*</em>, <em>key=None</em>, <em>reverse=False</em>) <ul><li>就地排序列表中的元素（要了解自定义排序参数，详见 <a href="https://docs.python.org/zh-cn/3.14/library/functions.html#sorted" title="sorted" target="_blank" rel="noopener noreferrer"><code>sorted()</code></a>）。</li></ul></li><li>list.reverse() <ul><li>翻转列表中的元素。</li></ul></li><li>list.copy() <ul><li>返回列表的浅拷贝。 类似于 <code>a[:]</code>。</li></ul></li></ul><p>仅修改列表的方法都不会打印返回值，比如 <code>insert</code>, <code>remove</code> 或 <code>sort</code>，它们返回默认值 None。这是适用于 Python 中所有可变数据结构的设计原则。</p>`,66))])}const d=a(t,[["render",h]]),o=JSON.parse('{"path":"/programming%20languagae/Python%20%E5%85%A5%E9%97%A8.html","title":"Python 入门","lang":"zh-CN","frontmatter":{"title":"Python 入门","date":"2025-10-08T00:00:00.000Z","tags":["Python","官方教程"],"category":["编程语言"],"description":"学习 Python 官方的 Python3 tutorial 中文版。有关该文档的介绍如下： 本教程对每一个功能的介绍并不完整，甚至没有涉及全部常用功能，只是介绍了 Python 中最值得学习的功能，旨在让读者快速感受一下 Python 的特色。学完本教程的读者可以阅读和编写 Python 模块和程序，也可以继续学习 Python 标准库。 标准库与模...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-10-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-08T15:22:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"庸碌无常\\",\\"url\\":\\"https://pluinyiasnhg.top\\"}]}"],["meta",{"property":"og:url","content":"https://pluinyiasnhg.top/programming%20languagae/Python%20%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"庸碌无常的博客"}],["meta",{"property":"og:title","content":"Python 入门"}],["meta",{"property":"og:description","content":"学习 Python 官方的 Python3 tutorial 中文版。有关该文档的介绍如下： 本教程对每一个功能的介绍并不完整，甚至没有涉及全部常用功能，只是介绍了 Python 中最值得学习的功能，旨在让读者快速感受一下 Python 的特色。学完本教程的读者可以阅读和编写 Python 模块和程序，也可以继续学习 Python 标准库。 标准库与模..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-08T15:22:24.000Z"}],["meta",{"property":"article:tag","content":"官方教程"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:published_time","content":"2025-10-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-08T15:22:24.000Z"}]]},"git":{"createdTime":1759936944000,"updatedTime":1759936944000,"contributors":[{"name":"pluinyiasnhg","username":"pluinyiasnhg","email":"pluinyiasnhg@gmail.com","commits":1,"url":"https://github.com/pluinyiasnhg"}]},"readingTime":{"minutes":10.92,"words":3276},"filePathRelative":"programming languagae/Python 入门.md","excerpt":"\\n<p>学习 Python 官方的 <a href=\\"https://docs.python.org/zh-cn/3.14/tutorial/index.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Python3 tutorial 中文版</a>。有关该文档的介绍如下：</p>\\n<blockquote>\\n<p>本教程对每一个功能的介绍并不完整，甚至没有涉及全部常用功能，只是介绍了 Python 中最值得学习的功能，旨在让读者快速感受一下 Python 的特色。学完本教程的读者可以阅读和编写 Python 模块和程序，也可以继续学习&nbsp;<a href=\\"https://docs.python.org/zh-cn/3.14/library/index.html#library-index\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Python 标准库</a>。<br>\\n标准库与模块的内容详见&nbsp;<a href=\\"https://docs.python.org/zh-cn/3.14/library/index.html#library-index\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Python 标准库</a>。<a href=\\"https://docs.python.org/zh-cn/3.14/reference/index.html#reference-index\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Python 语言参考手册</a>&nbsp;是更正规的语言定义。</p>\\n</blockquote>\\n","autoDesc":true}');export{d as comp,o as data};
