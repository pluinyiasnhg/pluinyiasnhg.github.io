import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,b as n,d,e as s,o as l}from"./app-CV2M5tcU.js";const h={};function p(o,i){return l(),a("div",null,[i[0]||(i[0]=t("h1",{id:"前言",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#前言"},[t("span",null,"前言")])],-1)),i[1]||(i[1]=t("p",null,[s("阅读 Scott Chacon 的"),t("a",{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"},"《Pro Git》中文版"),s("前两章，主要是 Git 本地命令，不涉及分支操作。")],-1)),n(" more "),i[2]||(i[2]=d(`<h1 id="_1-版本控制系统" tabindex="-1"><a class="header-anchor" href="#_1-版本控制系统"><span>1. 版本控制系统</span></a></h1><h2 id="本地版本控制系统" tabindex="-1"><a class="header-anchor" href="#本地版本控制系统"><span>本地版本控制系统</span></a></h2><p>人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。</p><h2 id="集中化的版本控制系统" tabindex="-1"><a class="header-anchor" href="#集中化的版本控制系统"><span>集中化的版本控制系统</span></a></h2><p>如何让在不同系统上的开发者协同工作？ 集中化的版本控制系统（Centralized Version Control Systems，简称 CVCS）应运而生。 这类系统，诸如 CVS、Subversion 以及 Perforce 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。</p><p>CVCS 显而易见的缺点是中央服务器的单点故障。 如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。 如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑问你将丢失所有数据，包括项目的整个变更历史，只剩下人们在各自机器上保留的单独快照。 本地版本控制系统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。</p><h2 id="分布式版本控制系统" tabindex="-1"><a class="header-anchor" href="#分布式版本控制系统"><span>分布式版本控制系统</span></a></h2><p>于是分布式版本控制系统（Distributed Version Control System，简称 DVCS）面世了。 在这类系统中，像 Git、Mercurial 以及 Darcs 等，客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</p><p>Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方式。 从概念上来说，其它大部分系统以文件变更列表的方式存储信息，这类系统（CVS、Subversion、Perforce 等等） 将它们存储的信息看作是一组基本文件和每个文件随时间逐步累积的差异 （它们通常称作 基于差异（delta-based） 的版本控制）。</p><p>反之，Git 更像是把数据看作是对小型文件系统的一系列快照。 在 Git 中，每当你提交更新或保存项目状态时，它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引。 为了效率，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。</p><h2 id="git-特点" tabindex="-1"><a class="header-anchor" href="#git-特点"><span>Git 特点</span></a></h2><ul><li>Git 近乎所有操作都是本地执行。因为在本地磁盘上就有项目的完整历史，所以大部分操作看起来瞬间完成</li><li>Git 保证完整性。Git 中所有的数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容</li><li>Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名</li><li>Git 一般只添加数据。执行的 Git 操作，几乎只往 Git 数据库中添加数据。 你很难使用 Git 从数据库中删除数据，也就是说 Git 几乎不会执行任何可能导致文件不可恢复的操作。 同别的 VCS 一样，未提交更新时有可能丢失或弄乱修改的内容。但是一旦你提交快照到 Git 中， 就难以再丢失数据</li></ul><h1 id="_2-git-基础" tabindex="-1"><a class="header-anchor" href="#_2-git-基础"><span>2. Git 基础</span></a></h1><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h2><p>Git 自带一个 <code>git config</code> 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：</p><ol><li><code>/etc/gitconfig</code> 包含系统上每一个用户及他们仓库的通用配置。如果在执行 git config 时带上 <code>--system</code> 选项，那么它就会读写该文件中的配置变量（由于它是系统配置文件，因此需要超级用户权限来修改它）</li><li><code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 只针对当前用户。 可以传递 <code>--global</code> 选项让 Git 读写此文件，这会对你系统上所有的仓库生效。</li><li>当前使用仓库的 Git 目录中的 config 文件（即 <code>.git/config</code>）：针对该仓库。可以传递 <code>--local</code> 选项让 Git 强制读写此文件，虽然默认情况下用的就是它。</li></ol><p>可以使用 <code>git config --list</code> 命令来列出所有 Git 当时能找到的配置。</p><p>由于 Git 会从多个文件中读取同一配置变量的不同值，因此你可能会在其中看到意料之外的值而不知道为什么。 此时，可以查询 Git 中该变量的原始值，它会显示哪一个配置文件最后设置了该值：<code>git config --show-origin &lt;配置变量&gt;</code>。</p><h2 id="用户信息" tabindex="-1"><a class="header-anchor" href="#用户信息"><span>用户信息</span></a></h2><p>设置用户名和邮件地址。 每一个 Git 提交都会使用到这些信息，它们会写入到你的每一次提交中，不可更改：</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user.name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;John Doe&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user.email</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> johndoe@example.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 <code>--global</code> 选项的命令来配置。</p><h2 id="默认编辑器" tabindex="-1"><a class="header-anchor" href="#默认编辑器"><span>默认编辑器</span></a></h2><p>配置默认文本编辑器，当 Git 需要你输入信息时会调用它。 如果未配置，Git 会使用操作系统默认的文本编辑器。以 Emacs 为例：</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> core.editor</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> emacs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="别名" tabindex="-1"><a class="header-anchor" href="#别名"><span>别名</span></a></h2><p>Git 并不会在你输入部分命令时自动推断出你想要的命令。 如果不想每次都输入完整的 Git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名。 这里有一些例子：</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alias.co</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alias.br</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> branch</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alias.ci</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alias.st</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，为了解决取消暂存文件的易用性问题，可以向 Git 中添加自己的取消暂存别名：<code>git config --global alias.unstage &#39;reset HEAD --&#39;</code>。这会使下面的两个命令等价：</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> unstage</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fileA</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 等价于</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reset</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HEAD</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fileA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常也会添加一个 last 命令 <code>git config --global alias.last &#39;log -1 HEAD&#39;</code>。这样，可以轻松地看到最后一次提交：<code>git last</code>。</p><p>可以看出，Git 只是简单地将别名替换为对应的命令。 然而，你可能想要执行外部命令，而不是一个 Git 子命令。 如果是那样的话，可以在命令前面加入 <code>!</code> 符号。 比如 <code>git visual</code> 定义为 gitk 的别名：<code>git config --global alias.visual &#39;!gitk&#39;</code>。</p><h2 id="获取帮助" tabindex="-1"><a class="header-anchor" href="#获取帮助"><span>获取帮助</span></a></h2><p>以 git config 为例：</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> help</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --help</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">man</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git-config</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-本地命令" tabindex="-1"><a class="header-anchor" href="#git-本地命令"><span>Git 本地命令</span></a></h2><p>Git 有三种状态：已修改、已暂存和已提交。</p><ul><li>已修改表示修改了文件，但还没保存到数据库中。</li><li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li><li>已提交表示数据已经安全地保存在本地数据库中。</li></ul><p>Git 工作流程：</p><ol><li>在工作区中修改文件。</li><li>将想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。</li><li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。</li></ol><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，可以创建一个名为 .gitignore 的文件，列出要忽略的文件的模式。</p><p>GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表， 可以在 <a href="https://github.com/github/gitignore" target="_blank" rel="noopener noreferrer">https://github.com/github/gitignore</a> 找到它。</p><figure><img src="https://vip.123pan.cn/1844935313/obsidian/20250303120945551.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ul><li><code>git init</code> 创建本地仓库</li><li><code>git clone</code> 克隆远程仓库</li><li><code>git status</code> 查看文件状态</li><li><code>git add</code> 跟踪文件或目录下的所有文件</li><li><code>git diff</code> 通过文件补丁的格式更加具体地显示哪些行发生改变</li><li><code>git commit</code> 提交更新</li><li><code>git rm</code> 移除文件，有两种：从 git 中移除和从磁盘移除</li><li><code>git mv</code> 重命名文件</li><li><code>git log</code> 查看提交历史</li><li>撤销操作：<code>git commit --amend</code>、<code>git reset HEAD &lt;file&gt;</code>、<code>git checkout -- &lt;file&gt;</code></li><li>远程仓库：<code>git remote</code>、<code>git fetch</code>、<code>git pull</code>、<code>git push</code></li><li><code>git tag</code> 打标签</li></ul><h3 id="git-clone" tabindex="-1"><a class="header-anchor" href="#git-clone"><span>git clone</span></a></h3><p>克隆远程仓库的时候，可以自定义本地仓库的名字，如 <code>git clone https://github.com/libgit2/libgit2 mylibgit</code>，仓库所在目录名变为了 mylibgit。</p><h3 id="git-add" tabindex="-1"><a class="header-anchor" href="#git-add"><span>git add</span></a></h3><p><code>git add</code> 命令是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 将这个命令理解为“精确地将内容添加到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。</p><h3 id="git-diff" tabindex="-1"><a class="header-anchor" href="#git-diff"><span>git diff</span></a></h3><p><code>git diff --staged</code> 命令查看已暂存的将要添加到下次提交里的内容。 这条命令将比对已暂存文件与最后一次提交的文件差异。</p><p>注意，git diff 本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动。 所以有时候你一下子暂存了所有更新过的文件，运行 git diff 后却什么也没有，就是这个原因。</p><h3 id="git-commit" tabindex="-1"><a class="header-anchor" href="#git-commit"><span>git commit</span></a></h3><p><code>git commit</code> 提交时记录的是放在暂存区域的快照。 任何还未暂存文件的仍然保持已修改状态，可以在下次提交时纳入版本管理。 每一次运行提交操作，都是对项目作一次快照，以后可以回到这个状态，或者进行比较。</p><p>Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，使用 <code>git commit -a</code>，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤。</p><h3 id="git-rm" tabindex="-1"><a class="header-anchor" href="#git-rm"><span>git rm</span></a></h3><p><code>git rm</code> 命令用于移除文件，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。下一次提交时，该文件就不再纳入版本管理了。</p><p>要删除之前修改过或已经放到暂存区的文件，则必须使用强制删除选项 <code>-f</code>（force 的首字母）。 这是一种安全特性，用于防止误删尚未添加到快照的数据。</p><p>另一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 .gitignore 文件，不小心把一个很大的日志文件或一堆 .a 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用 <code>--cached</code> 选项。</p><h3 id="git-mv" tabindex="-1"><a class="header-anchor" href="#git-mv"><span>git mv</span></a></h3><p>运行 git mv 就相当于运行了下面三条命令。如此分开操作，Git 也会意识到这是一次重命名。</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mv</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> README.md</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> README</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> README.md</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> README</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-log" tabindex="-1"><a class="header-anchor" href="#git-log"><span>git log</span></a></h3><p><code>git log</code> 会按时间先后顺序列出所有的提交，最近的更新排在最上面。 这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。</p><p>其中一个比较有用的选项是 <code>-p</code> 或 <code>--patch</code> ，它会显示每次提交所引入的差异（按补丁的格式输出）。 你也可以限制显示的日志条目数量，例如使用 -2 选项来只显示最近的两次提交：<code>git log -p -2</code>。</p><p>可以为 git log 附带一系列的总结性选项。 比如想看到每次提交的简略统计信息，可以使用 <code>--stat</code> 选项。--stat 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。</p><p>当 oneline 或 format 与另一个 log 选项 <code>--graph</code> 结合使用时尤其有用。 这个选项添加了一些 ASCII 字符串来形象地展示你的分支、合并历史：<code>git log --pretty=format:&quot;%h %s&quot; --graph</code> 。</p><table><thead><tr><th><code>git log</code> 常用选项</th><th>说明</th></tr></thead><tbody><tr><td><code>-p</code></td><td>按补丁格式显示每个提交引入的差异</td></tr><tr><td><code>--stat</code></td><td>显示每次提交的文件修改统计信息</td></tr><tr><td>--shortstat</td><td>只显示 --stat 中最后的行数修改添加移除统计</td></tr><tr><td>--name-only</td><td>仅在提交信息后显示已修改的文件清单</td></tr><tr><td>--name-status</td><td>显示新增、修改、删除的文件清单</td></tr><tr><td>--abbrev-commit</td><td>仅显示 SHA-1 校验和所有 40 个字符中的前几个字符</td></tr><tr><td>--relative-date</td><td>使用较短的相对时间而不是完整格式显示日期（比如“2 weeks ago”）</td></tr><tr><td><code>--graph</code></td><td>在日志旁以 ASCII 图形显示分支与合并历史</td></tr><tr><td><code>--pretty</code></td><td>使用其他格式显示历史提交信息。可用的选项包括 oneline、short、full、fuller 和 format（用来定义自己的格式）</td></tr><tr><td>--oneline</td><td>--pretty=oneline --abbrev-commit 合用的简写</td></tr><tr><td><code>--no-merges</code></td><td>隐藏合并提交，避免显示的合并提交弄乱历史记录</td></tr></tbody></table><p><code>--pretty=format</code> 可以定制记录的显示格式。 这样的输出对后期提取分析格外有用。</p><table><thead><tr><th><code>format</code> 常用选项</th><th>说明</th></tr></thead><tbody><tr><td>%H</td><td>提交的完整哈希值</td></tr><tr><td>%h</td><td>提交的简写哈希值</td></tr><tr><td>%T</td><td>树的完整哈希值</td></tr><tr><td>%t</td><td>树的简写哈希值</td></tr><tr><td>%P</td><td>父提交的完整哈希值</td></tr><tr><td>%p</td><td>父提交的简写哈希值</td></tr><tr><td>%an</td><td>作者名字</td></tr><tr><td>%ae</td><td>作者的电子邮件地址</td></tr><tr><td>%ad</td><td>作者修订日期（可以用 --date=选项 来定制格式）</td></tr><tr><td>%ar</td><td>作者修订日期，按多久以前的方式显示</td></tr><tr><td>%cn</td><td>提交者的名字</td></tr><tr><td>%ce</td><td>提交者的电子邮件地址</td></tr><tr><td>%cd</td><td>提交日期</td></tr><tr><td>%cr</td><td>提交日期（距今多长时间）</td></tr><tr><td>%s</td><td>提交说明</td></tr></tbody></table><p>这里的作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人。</p><h3 id="撤消操作" tabindex="-1"><a class="header-anchor" href="#撤消操作"><span>撤消操作</span></a></h3><p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <code>--amend</code> 选项的提交命令来重新提交：<code>git commit --amend</code>。这个命令会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令）， 那么快照会保持不变，而你所修改的只是提交信息。</p><p>当你在修补最后的提交时，与其说是修复旧提交，倒不如说是完全用一个新的提交替换旧的提交。从效果上来说，就像是旧有的提交从未存在过一样，它并不会出现在仓库的历史中。修补提交最明显的价值是可以稍微改进你最后的提交，而不会让“啊，忘了添加一个文件”或者 “小修补，修正笔误”这种提交信息弄乱你的仓库历史。</p><p><code>git reset HEAD &lt;file&gt;</code> 取消暂存的文件。</p><p><code>git checkout -- &lt;file&gt;</code> 撤消对文件的修改。 你对那个文件在本地的任何修改都会消失——Git 会用最近提交的版本覆盖掉它。 除非确实清楚不想要对那个文件的本地修改了，否则不要使用这个命令。</p><p>记住，在 Git 中任何<strong>已提交</strong>的东西几乎总是可以恢复的。 甚至那些被删除的分支中的提交或使用 --amend 选项覆盖的提交也可以恢复。 然而，任何未提交的东西丢失后很可能再也找不到了。</p><h3 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库"><span>远程仓库</span></a></h3><p><code>git remote</code> 命令会列出你指定的每一个远程服务器的简写。 如果你已经克隆了自己的仓库，那么至少应该能看到 origin ，这是 Git 给克隆的仓库服务器的默认名字。指定选项 <code>-v</code>，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。</p><p><code>git remote add &lt;shortname&gt; &lt;url&gt;</code> 会添加一个新的远程 Git 仓库，同时指定一个方便使用的简写：</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> origin</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/paulboone/ticgit</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/schacon/ticgit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (fetch)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">origin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/schacon/ticgit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (push)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     https://github.com/paulboone/ticgit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (fetch)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     https://github.com/paulboone/ticgit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (push)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你可以在命令行中使用字符串 pb 来代替整个 URL。 例如，如果你想拉取 Paul 的仓库中有但你没有的信息，可以运行 git fetch pb。</p><p>注意 <code>git fetch</code> 命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。</p><p>如果你的当前分支设置了跟踪远程分支， 那么可以用 <code>git pull</code> 命令来自动抓取后合并该远程分支到当前分支。</p><p><code>git push &lt;remote&gt; &lt;branch&gt;</code>。 当你想要将 master 分支推送到 origin 服务器时， 那么运行这个命令就可以将你所做的备份到服务器：<code>git push origin master</code>。只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。</p><p>如果想要查看某一个远程仓库的更多信息，可以使用 <code>git remote show &lt;remote&gt;</code> 命令。</p><p><code>git remote rename</code> 用来修改一个远程仓库的简写名。 例如，想要将 pb 重命名为 paul，可以用 <code>git remote rename pb paul</code>。</p><p>如果因为一些原因想要移除一个远程仓库——你已经从服务器上搬走了或不再想使用某一个特定的镜像了， 又或者某一个贡献者不再贡献了——可以使用 <code>git remote remove</code> 或 <code>git remote rm</code>。 一旦你使用这种方式删除了一个远程仓库，那么所有和这个远程仓库相关的远程跟踪分支以及配置信息也会一起被删除。</p><h3 id="git-tag" tabindex="-1"><a class="header-anchor" href="#git-tag"><span>git tag</span></a></h3><p>像其他版本控制系统一样，Git 可以给仓库历史中的某一个提交打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（ v1.0 、v2.0 等等）。</p><ul><li>列出已有的标签 <code>git tag</code>（可选 -l 或 --list选项 ）</li><li>查看标签信息和与之对应的提交信息 <code>git show v1.4</code></li></ul><p>#创建标签</p><p>Git 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。轻量标签很像一个不会改变的分支——它只是某个特定提交的引用。而附注标签是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 GNU Privacy Guard （GPG）签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。</p><ul><li>创建附注标签：指定 <code>-a</code> 选项 <code>git tag -a v1.4 -m &quot;my version 1.4&quot;</code></li><li>创建轻量标签：提供标签名字 <code>git tag v1.5</code>。轻量标签本质上是将提交校验和存储到一个文件中——没有保存任何其他信息</li></ul><p>后期打标签。假设在 v1.2 时你忘记给项目打标签，也就是在 “updated rakefile” 提交。 你可以在之后补上标签。 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）：<code>git tag -a v1.2 9fceb02</code>。</p><p>#共享标签</p><p>默认情况下，git push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地用<code>git push origin &lt;tagname&gt;</code>推送标签到共享服务器上。这个过程就像共享远程分支一样。</p><p>想要一次性推送多个标签，可以使用 <code>--tags</code> 选项。 这将会把所有不在远程仓库服务器上的标签全部传送到那里。推送标签并不会区分轻量标签和附注标签， 没有简单的选项能够让你只选择推送一种标签。</p><p>#删除标签</p><p>要删除掉你本地仓库上的标签，可以使用命令 <code>git tag -d &lt;tagname&gt;</code>。 注意，这并不会从任何远程仓库中移除这个标签，必须用 <code>git push &lt;remote&gt; :refs/tags/&lt;tagname&gt;</code> 来更新远程仓库。含义是，将冒号前面的空值推送到远程标签名，从而高效地删除它。</p><p>还有一种更直观的删除远程标签的方式是：<code>git push origin --delete &lt;tagname&gt;</code>。</p><p>#检出标签</p><p>查看某个标签所指向的文件版本，可以使用 <code>git checkout</code> 命令， 这会使你的仓库处于“分离头指针（detached HEAD）”的状态，这个状态有些不好的副作用：</p><p>在“分离头指针”状态下，如果你做了某些更改然后提交它们，标签不会发生变化， 但你的新提交将不属于任何分支，并且将无法访问，除非通过确切的提交哈希才能访问。 因此，如果你需要进行更改，比如你要修复旧版本中的错误，那么通常需要创建一个新分支：<code>git checkout -b version2 v2.0.0</code>。如果在这之后又进行了一次提交，version2 分支就会因为这个改动向前移动， 此时它就会和 v2.0.0 标签稍微有些不同，这时就要当心了。</p>`,103))])}const g=e(h,[["render",p]]),k=JSON.parse('{"path":"/tools/Git%20%E5%85%A5%E9%97%A8(1).html","title":"Git 入门(1)","lang":"zh-CN","frontmatter":{"title":"Git 入门(1)","date":"2025-10-06T00:00:00.000Z","tags":["Git"],"category":["代码效率"],"description":"阅读 Scott Chacon 的《Pro Git》中文版前两章，主要是 Git 本地命令，不涉及分支操作。","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git 入门(1)\\",\\"image\\":[\\"https://vip.123pan.cn/1844935313/obsidian/20250303120945551.png\\"],\\"datePublished\\":\\"2025-10-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-06T15:30:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"庸碌无常\\",\\"url\\":\\"https://pluinyiasnhg.top\\"}]}"],["meta",{"property":"og:url","content":"https://pluinyiasnhg.top/tools/Git%20%E5%85%A5%E9%97%A8(1).html"}],["meta",{"property":"og:site_name","content":"庸碌无常的博客"}],["meta",{"property":"og:title","content":"Git 入门(1)"}],["meta",{"property":"og:description","content":"阅读 Scott Chacon 的《Pro Git》中文版前两章，主要是 Git 本地命令，不涉及分支操作。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vip.123pan.cn/1844935313/obsidian/20250303120945551.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-06T15:30:30.000Z"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:published_time","content":"2025-10-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-06T15:30:30.000Z"}]]},"git":{"createdTime":1759764630000,"updatedTime":1759764630000,"contributors":[{"name":"pluinyiasnhg","username":"pluinyiasnhg","email":"pluinyiasnhg@gmail.com","commits":1,"url":"https://github.com/pluinyiasnhg"}]},"readingTime":{"minutes":18.71,"words":5613},"filePathRelative":"tools/Git 入门(1).md","excerpt":"\\n<p>阅读 Scott Chacon 的<a href=\\"https://git-scm.com/book/zh/v2\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">《Pro Git》中文版</a>前两章，主要是 Git 本地命令，不涉及分支操作。</p>\\n","autoDesc":true}');export{g as comp,k as data};
