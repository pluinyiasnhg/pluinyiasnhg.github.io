import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as c,b as i,d as l,e as o,o as s}from"./app-DlezE97U.js";const t={};function n(r,e){return s(),a("div",null,[e[0]||(e[0]=c("h1",{id:"前言",tabindex:"-1"},[c("a",{class:"header-anchor",href:"#前言"},[c("span",null,"前言")])],-1)),e[1]||(e[1]=c("p",null,[o("学习 Emacs 内置文档 Emacs tutorial ，结合在线文档 "),c("a",{href:"https://www.gnu.org/software/emacs/tour/index.html",target:"_blank",rel:"noopener noreferrer"},"A Guided Tour of Emacs"),o("。")],-1)),i(" more "),e[2]||(e[2]=l('<p>一直想学习 Emacs，但是苦于无法入门。有看过一步步配置出自己的 Emacs 的教程，包括博客教程和视频教程，但学着很不得劲。最后的水平也就记住了退出和保存的快捷键 <code>C-x C-c</code> 和 <code>C-x C-s</code> 。</p><h1 id="emacs-tutorial" tabindex="-1"><a class="header-anchor" href="#emacs-tutorial"><span>Emacs tutorial</span></a></h1><p>我不喜欢 Emacs 的图形化界面，感觉像十年前的前端样式，“不是我喜欢的 Emacs ，直接拒绝”。在终端中输入 <code>emacs -nw</code> ，emacs 就在终端中启动了。</p><p>先过一遍 Emacs 内置的快速指南，快捷键是 <code>C-h t</code> 。如果像我一样不习惯阅读英文，用命令 <code>M-x help-with-tutorial-spec-language</code>，选择一份中文文档进行学习。这里的 <code>M</code> 是 Meta 键，通常是键盘上的 <code>Alt</code> 。</p><figure><img src="https://vip.123pan.cn/1844935313/obsidian/20250918084530894.png" alt="Emacs 快速指南" width="750" tabindex="0" loading="lazy"><figcaption>Emacs 快速指南</figcaption></figure><p>一些概念：</p><ul><li>回显区：屏幕最下面一行，用于显示输入的命令</li><li>状态栏：回显区正上方的一行，显示 Emacs 的状态和你正在编辑的文字的一些信息</li><li>缓冲区（buffer）：为了方便理解，可以简单看作文件（file）</li><li>注意，Emacs 中 window 指代的是本文提到的窗格，frame 指代的是本文提到的窗口，阅读官方文档要注意区分</li><li>point 是“逻辑游标”，cursor 是“视觉光标”。在多数情况下，用户感知到的是 cursor，而实际编辑操作基于 point</li><li><code>yank</code> 翻译为“召回”，可以简单看作复制粘贴的粘贴</li><li>注意，快捷键 <code>&lt;DEL&gt;</code> 指的是退格键 Backspace，而不是 Delete 键</li></ul><h2 id="移动光标" tabindex="-1"><a class="header-anchor" href="#移动光标"><span>移动光标</span></a></h2><p>我的习惯是，Emacs 的上下左右移动快捷键要学，因为之前 Vim 的中英文切换让我十分狼狈，以至于养成了“每次输入完中文都会主动切换回英文”的习惯。</p><p>简而言之就是利用 Vim 的模式，插入模式用 Emacs 进行光标移动，普通模式下则用 Vim 移动。</p><ul><li><code>C-p</code> (previous-line)：上移</li><li><code>C-n</code> (next-line)：下移</li><li><code>C-b</code> (backward-char)：左移</li><li><code>C-f</code> (forward-char)：右移</li><li><code>C-a</code> (move-beginning-of-line)：可以将光标移动到“一行”的头部</li><li><code>C-e</code> (evil-scroll-line-down)：可以将光标移动到“一行”的尾部</li></ul><p>Meta 系列组合键用来操作“由语言定义的单位（比如词、句子、段落）”，而 Ctrl 系列组合键用来操作“与语言无关的基本单位（比如字符、行等等）”。比较奇怪的是，我用 <code>C-h c</code> 查询 <code>M-p</code> <code>M-n</code> 时，回显区显示这两个快捷键未定义。但实际上这两个键在 Emacs 中能用。</p><ul><li><code>M-p</code> (Previous <strong>sentence</strong>)：上一句</li><li><code>M-n</code> (Next <strong>sentence</strong>)：下一句</li><li><code>M-b</code> (backward-<strong>word</strong>)：左移一词</li><li><code>M-f</code> (forward-<strong>word</strong>)：右移一词</li><li><code>M-a</code> (c-beginning-of-statement)：将光标移动到“一句”的头部</li><li><code>M-e</code> (c-end-of-statement)：将光标移动到“一句”的尾部</li></ul><p>接下来的前移后移和居中，适合浏览代码：</p><ul><li><code>C-v</code> (scroll-up-command)：后移一屏</li><li><code>M-v</code> (scroll-down-command)：前移一屏</li><li><code>C-l</code> (recenter-top-bottom)：光标所在行居中。多按几次，就是“中-上-下”循环</li><li><code>M-&lt;</code> (beginning-of-buffer)：等同 Vim 中的 <code>gg</code></li><li><code>M-&gt;</code> (end-of-buffer)：等同 Vim 中的 <code>G</code></li></ul><p>前缀 <code>C-u</code> (universal-argument) + 数字 + 移动命令，可以起到重复执行指定次数的移动命令。<code>M-[digit]</code> 是 <code>C-u [digit]</code> 的缩写。不过我电脑上已经占用了 <code>M-1</code> <code>M-2</code> <code>M-3</code> 这三个快捷键，所以就用不上了。</p><ul><li><code>C-u 3 C-p</code> 上移3行距离</li><li><code>C-u 10 C-f</code> 右移10个字符距离</li><li><code>C-u C-n</code> 下移<code>4</code>行距离。<code>C-u</code> 不显式指定数字时，隐式指定数字4，用于不确定要移动多远距离时</li></ul><h3 id="大小写变换" tabindex="-1"><a class="header-anchor" href="#大小写变换"><span>大小写变换</span></a></h3><ul><li><code>M-u</code> (upcase-word)：将当前单词变成大写，并且光标移动到下一个单词末尾</li><li><code>M-l</code> (downcase-word)：将当前单词变成小写，并且光标移动到下一个单词末尾</li><li><code>M-c</code> (capitalize-word)：将当前单词首字母变成大写，并且光标移动到下一个单词末尾</li></ul><h3 id="交换位置" tabindex="-1"><a class="header-anchor" href="#交换位置"><span>交换位置</span></a></h3><ul><li><code>M-t</code> (transpose-words)：交换光标左右两侧的单词</li><li><code>C-t</code> (transpose-chars)：交换光标左右两侧的字符</li></ul><h2 id="搜索" tabindex="-1"><a class="header-anchor" href="#搜索"><span>搜索</span></a></h2><h3 id="增量搜索" tabindex="-1"><a class="header-anchor" href="#增量搜索"><span>增量搜索</span></a></h3><p>在缓冲区中进行搜索，可以看作是另一种光标移动操作。</p><ul><li><code>C-s</code> (isearch-forward)：向前增量搜索</li><li><code>C-r</code> (isearch-backward)：向后增量搜索</li></ul><p>以向前搜索为例，<code>C-s</code> 后接想找的字符串，匹配到结果后，继续按 <code>C-s</code> ，光标会跳转到下一个匹配的字符串。此时，按 <code>C-g</code> ，光标返回初始位置；按 <code>&lt;return&gt;</code> ，光标停留在匹配字符串，此时用 <code>C-x C-x</code> 也能让光标返回初始位置。</p><ul><li><code>C-s C-s</code> ：复用最近一次搜索用到的字符串。比如退出搜索后发现匹配的位置不对，此时可以用该快捷键，而不用重新输入字符串搜索</li><li><code>C-s M-p</code> ：选中搜索历史记录中上一条记录</li><li><code>C-s M-n</code> ：选中搜索历史记录中下一条记录</li><li><code>C-h k C-s</code> ：更多增量搜索相关的命令</li></ul><h3 id="查询替换" tabindex="-1"><a class="header-anchor" href="#查询替换"><span>查询替换</span></a></h3><p>查询替换命令 <code>M-%</code> (query-replace) 会提示输入一个搜索字符串和一个替换内容。然后，对于缓冲区中的每个匹配项，可以选择是否替换搜索字符串。以下是每个提示下可用的选项：</p><ul><li>输入 <code>y</code> 来替换当前匹配项。</li><li>输入 <code>n</code> 来跳到下一个匹配项而不替换。</li><li>输入 <code>q</code> 来退出而不进行任何其他替换。</li><li>输入 <code>.</code> 来替换此匹配项，然后退出。</li><li>输入 <code>!</code> 来不再询问地替换所有剩余匹配项。</li></ul><h3 id="正则表达式搜索" tabindex="-1"><a class="header-anchor" href="#正则表达式搜索"><span>正则表达式搜索</span></a></h3><p>正则表达式是一种简洁的方式，可以通过使用一种特殊的语言来描述你要查找的内容的形式，从而一次性搜索许多不同的字符串。快捷键 <code>C-M-s</code> (isearch-forward-regexp) 用于正则表达式搜索。</p><p>如果你是正则表达式的新手，或者你正在构建一个特别复杂的正则表达式，你可以使用正则表达式构建器 <code>M-x re-builder</code> 。这个命令会弹出一个单独的窗口，你可以在其中测试你的正则表达式，并且在你编辑正则表达式时，原始缓冲区中的任何匹配项都会被突出显示。</p><p>与其逐个匹配，你也可以选择一次性显示所有匹配项。<code>M-x occur</code> 会提示输入正则表达式，然后在单独的缓冲区中显示当前缓冲区中所有匹配该正则表达式的行（以及它们的行号）。点击任何匹配项都会带你到缓冲区中的该行。</p><h2 id="标记" tabindex="-1"><a class="header-anchor" href="#标记"><span>标记</span></a></h2><p>标记（Mark）的作用是方便跳转回标记所在的位置。具体来说，<code>C-SPC</code> (set-mark-command) 标记当前行，继续浏览代码，如果某个时刻想要回来标记行，使用 <code>C-x C-x</code> (exchange-point-and-mark)。多次使用该快捷键，可以在标记行和“某个时刻所在的行”之间来回跳转。</p><p>标记的概念在 Emacs 中有强烈的体现：</p><table><thead><tr><th>当你……</th><th>标记设置在……</th></tr></thead><tbody><tr><td>输入 <code>C-SPC</code></td><td>当前所在位置</td></tr><tr><td>跳转到缓冲区头部或尾部 (<code>M-&lt;</code> 或 <code>M-&gt;</code>)</td><td>跳转前的位置</td></tr><tr><td>退出增量搜索</td><td>搜索前的位置</td></tr><tr><td>召回文本</td><td>召回区域的开始处</td></tr><tr><td>Insert a buffer or file</td><td>插入文本的开始处</td></tr></tbody></table><p>多次使用标记会在 Emacs 内部形成一个环，环中最多保留16个标记。在这16个标记中，通过 <code>C-u C-SPC</code> 进行跳转。</p><h2 id="区域" tabindex="-1"><a class="header-anchor" href="#区域"><span>区域</span></a></h2><p>标记还有另一个作用：标记和点一起界定区域（Region）。</p><ul><li><code>C-x h</code> (mark-whole-buffer)：选中当前缓冲区</li><li><code>M-h</code> (mark-paragraph)：选中当前段落</li></ul><p>在区域的配合下， Narrowing 限制缓冲区（以及编辑）的视图到一个特定区域。像增量搜索和跳转到缓冲区头部/尾部这些命令，也会随之限制在这个特定区域。Narrowing 适用于只想修改某个区域，不想影响到区域以外的缓冲区。</p><ul><li><code>C-x n n</code> (narrow-to-region)：视图从缓冲区到指定区域</li><li><code>C-x n w</code> (widen)：视图从指定区域返回缓冲区</li></ul><h2 id="取消命令" tabindex="-1"><a class="header-anchor" href="#取消命令"><span>取消命令</span></a></h2><p>命令输入一半，输错了或者不想用了，可以用 <code>C-g</code> (keyboard-quit)中断。特别的，<code>ESC</code> + <code>C-g</code> 会显示组合键未定义，建议多按两次 <code>ESC</code> 取消。</p><h2 id="删除移除" tabindex="-1"><a class="header-anchor" href="#删除移除"><span>删除移除</span></a></h2><ul><li><code>&lt;DEL&gt;</code> (c-electric-backspace)：等同日常生活中的 Backspace 键</li><li><code>C-d</code> (c-electric-delete-forward)：等同日常生活中的 Delete 键</li><li><code>M-&lt;DEL&gt;</code> (clean-aindent-bsunident)：移除光标前一词</li><li><code>M-d</code> (kill-word)：移除光标后一词</li><li><code>C-k</code> (kill-line)：移除从光标到“行尾”间的字符</li><li><code>M-k</code> (kill-sentence)：移除从光标到“句尾”间的字符</li></ul><p>删除是 delete，移除是 kill。区别在于：被 kill 的文本被 Emacs 记录下来，后续可以重新插入被移除的文本，类似平时用的剪贴功能，Emacs 称之为 yank。</p><p>只消除一个字符或者只消除空白的命令，无法用 <code>C-y</code> 插入被移除的字符或空白，比如 <code>&lt;DEL&gt;</code> 和 <code>C-d</code> 。但这也不是绝对的，这两条命令有前缀参数 <code>C-u</code> 时，就变成了”移除“命令。</p><ul><li><code>C-y</code> (yank)：召回最近一次移除的内容</li><li><code>M-y</code> (yank-pop)：召回再前一次被移除的内容，再按一次 <code>M-y</code> 又可以召回再上一次的内容……连续使用 <code>M-y</code> 会回到起始点</li></ul><h2 id="撤销" tabindex="-1"><a class="header-anchor" href="#撤销"><span>撤销</span></a></h2><p><code>C-x u</code>、<code>C-/</code> 和 <code>C-_</code> 都是撤销一条命令，不包括没有改变文字的命令，比如光标移动和滚动。</p><p>撤销（undo）可以恢复删除和移除的文本。移除文本+召回（yank）效果等同“剪贴”。</p><h2 id="键盘宏" tabindex="-1"><a class="header-anchor" href="#键盘宏"><span>键盘宏</span></a></h2><p>键盘宏是一种记住固定按键序列以便后续重复使用的方法。它们对于自动化一些枯燥的编辑任务很有用。</p><ul><li><code>F3</code> (kmacro-start-macro-or-insert-counter)：开始录制宏</li><li><code>F4</code> (kmacro-end-or-call-macro)：停止录制宏，或者播放宏一次</li><li><code>M-5 F4</code> ：播放宏5次</li><li><code>M-0 F4</code> ：反复播放宏直到它失败</li></ul><h2 id="文件" tabindex="-1"><a class="header-anchor" href="#文件"><span>文件</span></a></h2><ul><li><code>C-x C-f</code> (helm-find-files)：打开文件。若打开一个不存在的文件，则等同于创建一个新文件</li><li><code>C-x C-s</code> (save-buffer)：保存文件（当前缓冲区）。保存文件时，Emacs 会为文件备份</li></ul><p>关闭备份的方法：<code>M-x customize-variable &lt;Return&gt; make-backup-files &lt;Return&gt;</code> 。</p><h2 id="缓冲区" tabindex="-1"><a class="header-anchor" href="#缓冲区"><span>缓冲区</span></a></h2><ul><li><code>C-x C-b</code> (list-buffers)：列出缓冲区，仅能查看</li><li><code>C-x b</code> (helm-list-buffers)：列出缓冲区，可以切换</li><li><code>C-x s</code> (save-some-buffers)：保存所有缓冲区（所有文件）</li></ul><p>每个已打开的文件都是一个缓冲区。因此切换缓冲区，等同于打开一个已经打开的文件。</p><h2 id="窗格" tabindex="-1"><a class="header-anchor" href="#窗格"><span>窗格</span></a></h2><ul><li><code>C-x 0</code> (delete-window)：删除窗格</li><li><code>C-x 1</code> (maximize-window)：只保留光标所在的窗格</li><li><code>C-x 2</code> (split-window-below)：向下分割出窗格</li><li><code>C-x 3</code> (split-window-right)：向右分割出窗格</li><li><code>C-x o</code> (other-window)：切换窗格</li></ul><p>不管是向下分，还是向右分，光标还是位于原来的窗格。切换窗格时，多按几次 C-x o，就能循环遍历所有窗格。</p><p>光标可以不切换到新窗格，就能在新窗格中滚动页面。当前窗格滚动快捷键是 <code>C-v</code> 和 <code>M-v</code> ，新窗格是 <code>C-M-v</code> (scroll-other-window) 和 <code>C-M-S-v</code> 。这两个快捷键很重要，平时翻阅帮助文档时候，就是创建一个新窗格，在新窗格内查看文档。</p><p>与窗口的区别：终端中的 Emacs 只有一个窗口，即当前的终端窗口；GUI 界面的 Emacs 可以创建多个窗口。每个窗口有单独的菜单栏、滚动条，就像平时的应用多开。</p><h2 id="主模式" tabindex="-1"><a class="header-anchor" href="#主模式"><span>主模式</span></a></h2><p>主模式用于根据缓冲区的内容自定义外观和可用功能。Emacs自带了数十种主要模式，用于编辑常用编程语言、标记语言和配置文件格式。这些主要模式告诉Emacs如何：</p><ul><li>正确缩进代码</li><li>进行语法高亮</li><li>区分函数边界</li><li>调用代码要求的解释器，编译器或调试器</li></ul><h2 id="副模式" tabindex="-1"><a class="header-anchor" href="#副模式"><span>副模式</span></a></h2><p>副模式不像主模式只能有一个（在一个缓冲区中），可以同时开启多个副模式。一般每个副模式代表一个附加功能，比如语法检查（flymake）和自动补全（company）。</p><ul><li><code>M-x auto-fill-mode</code> ：一行超过70个字符，则自动换行</li><li><code>M-x flyspell-mode</code> ：高亮拼错的单词</li><li><code>M-x follow-mode</code> ：在两个并排显示的窗口共用一个缓冲区时，跟随模式会强制它们一起滚动，使得第二个窗口中显示的文本紧跟在第一个窗口中的文本之后</li></ul><p>一些副模式的影响范围是全局的，即不局限于某个缓冲区，是针对整个编辑器的，如：</p><ul><li><code>M-x incomplete-mode</code> ：随着输入，显示补全</li><li><code>M-x iswitchb-mode</code> ：用 <code>C-x b</code> 切换缓冲区时，会显示所有缓冲区的名字</li></ul><p><code>C-h m</code> 描述了已激活的主模式和副模式，通常会列出在该模式下有用的重要命令，这在学习使用新模式时非常有帮助。</p><h2 id="快捷键拓展" tabindex="-1"><a class="header-anchor" href="#快捷键拓展"><span>快捷键拓展</span></a></h2><p>Emacs 的命令就像天上的星星，数也数不清。把它们都对应到 Ctrl 和 Meta 组合键上显然是不可能的。Emacs 用扩展命令来解决这个问题，扩展命令有两种风格：</p><ul><li><code>C-x</code> ：字符扩展。 <code>C-x</code> 之后输入另一个字符或者组合键</li><li><code>M-x</code> ：命令名扩展。 <code>M-x</code> 之后输入一个命令名</li></ul><h2 id="挂起-emacs" tabindex="-1"><a class="header-anchor" href="#挂起-emacs"><span>挂起 Emacs</span></a></h2><p>如果需要临时从 Emacs 回到终端，可以不用保存和退出，选择挂起 Emacs：</p><ul><li><code>C-z</code> (suspend-frame)：挂起 Emacs</li><li>返回 Emacs：<code>fg</code> 或 <code>%emacs</code></li></ul><h2 id="自动保存" tabindex="-1"><a class="header-anchor" href="#自动保存"><span>自动保存</span></a></h2><p>Emacs 会定期将正在编辑的文件写入一个“自动保存”文件中。自动保存文件的文件名的头尾各有一个“#”字符，比如正在编辑的文件叫“hello.c”，那么它的自动保存文件就叫“#hello.c#”。这个文件会在正常存盘之后被 Emacs 删除。</p><p>打开原来的文件（注意不是自动保存文件）然后输入 <code>M-x recover file</code> 来恢复自动保存文件。</p><h2 id="递归编辑" tabindex="-1"><a class="header-anchor" href="#递归编辑"><span>递归编辑</span></a></h2><p>递归编辑状态由位于状态栏的方括号所指示，其中包含了用小括号来指明的模式名称。比如说，你有时可能会看到 <code>[(Fundamental)]</code>，而不是 <code>(Fundamental)</code> 。</p><p>不能用 <code>C-g</code> 退出递归编辑，而应该用 <code>ESC ESC ESC</code> 。这条命令还可以关闭多余的窗格。</p><h2 id="帮助文档" tabindex="-1"><a class="header-anchor" href="#帮助文档"><span>帮助文档</span></a></h2><ul><li><code>C-h k</code> (describle-key)：查看快捷键。在下方窗格中显示命令的完整文档</li><li><code>C-h c</code> (describle-key-briefly)：查看快捷键。在状态栏显示命令的简要说明</li><li><code>C-h f</code> (describle-function)：查看函数</li><li><code>C-h v</code> (describe-variable)：查看 Emacs 变量</li><li><code>C-h x</code> (describe-command)：解释一个命令</li><li><code>C-h a</code> (apropos-command)：<strong>相关命令搜索</strong>，即 Emacs 根据输入的关键词，罗列出所有包含关键词的命令</li><li><code>C-h m</code> (describe-mode)：查看当前缓冲区的主模式、副模式</li><li><code>C-h r</code> (info-emacs-manual)：继续学习 Emacs 的权威指南 <a href="https://www.gnu.org/software/emacs/manual/emacs.html" target="_blank" rel="noopener noreferrer">GNU Emacs Manual</a></li><li><code>C-h i</code> (info)：一些 Emacs 功能有自己的、独立的手册 (<code>C-h i d</code>)</li><li><code>C-h ?</code> (help-for-help)：info 的使用指南</li></ul><p><code>C-h c</code> 和 <code>C-h k</code> 根据快捷键确定；<code>C-h x</code> 根据命令名确定。</p><h2 id="软件仓库" tabindex="-1"><a class="header-anchor" href="#软件仓库"><span>软件仓库</span></a></h2><p><code>M-x list-packages</code> 可浏览所有可安装的软件包。这个命令显示的界面中可以安装和卸载软件包，以及查看软件包的简介。</p><h2 id="版本控制" tabindex="-1"><a class="header-anchor" href="#版本控制"><span>版本控制</span></a></h2><p>Emacs 帮助您操作和编辑存储在版本控制中的文件。Emacs 支持 CVS、Subversion、bzr、git、hg以及其他系统，但它提供了一个统一的接口，称为 VC。</p><ul><li><code>C-x v v</code> (vc-next-action)：提交当前文件，并给出日志信息</li><li><code>C-x v =</code> (vc-diff)：显示当前文件所做的更改的差异</li><li><code>C-x v ~</code> (vc-revision-other-window)：提示输入版本号，并在另一个窗口中显示当前文件的该版本</li><li><code>C-x v g</code> (vc-annotate)：显示文件的注释版本，其中每行显示该行最后一次更改的提交记录和更改者。在任何一行上，<code>L</code> 查看该提交的日志消息，<code>D</code> 查看相关的差异</li><li><code>C-x v l</code> (vc-print-log)：显示文件先前更改的日志。当光标位于特定日志条目上时，按 <code>d</code> 查看与此更改相关的 diff ，按 <code>f</code> 查看该文件的版本</li></ul><h2 id="编辑远程文件" tabindex="-1"><a class="header-anchor" href="#编辑远程文件"><span>编辑远程文件</span></a></h2><p>利用 Emacs 的 Tramp 功能，无须在远程安装 Emacs，在本地的 Emacs 上就能编辑远程文件，仿佛远程文件就在本地一样。本地的 Emacs 通过 SSH、FTP 等方式获取到远程文件，并在远程保存更改。</p><h2 id="emacs-服务器" tabindex="-1"><a class="header-anchor" href="#emacs-服务器"><span>Emacs 服务器</span></a></h2><p>通过 Emacs 打开一个文件，新打开的窗口通常需要重新加载一遍配置，这十分不方便。如果此时已经有一个 Emacs 实例，那么可以用 <code>emacsclient</code> 将新打开的窗口连接到该实例上。</p><h2 id="与常用工具集成" tabindex="-1"><a class="header-anchor" href="#与常用工具集成"><span>与常用工具集成</span></a></h2><ul><li><code>M-x shell</code> ：切换到名为 <code>*shell*</code> 的 shell 缓冲区，若不存在，则创建并切换过去</li><li><code>M-x compile</code> ：调用 <code>make</code> 并在新缓冲区中显示输出</li><li><code>M-x gdb</code> ：在一个新缓冲区中调用 <code>gdb</code></li><li><code>M-x man</code> ：等同于在 shell 中查看 man 文档，比如 <code>man unzip</code></li><li><code>M-x calendar</code> ：打开日历</li><li><code>M-x calculator</code> ：打开计算器</li><li><code>M-x lunar-phases</code> ：显示即将到来的月相</li></ul><h2 id="迁移到-emacs" tabindex="-1"><a class="header-anchor" href="#迁移到-emacs"><span>迁移到 Emacs</span></a></h2><p>在 Windows 中，核心编辑命令是 <code>C-z</code>、<code>C-x</code>、<code>C-c</code> 和 <code>C-v</code>。不幸的是，这些键在 Emacs 中经常用于其他目的（挂起、前缀键、前缀键和翻页）。在选项菜单中打开“CUA 模式”，可以将这些键恢复为撤销、剪切、复制和粘贴。</p><p>对于 Vim 用户，Viper (<code>M-x viper-mode</code>) 是一组在 Emacs 中模拟 vim 编辑行为的模式。它提供了不同级别的 vim 兼容性，具体取决于你希望你的 Emacs 有多像 vim。</p><h1 id="尾声" tabindex="-1"><a class="header-anchor" href="#尾声"><span>尾声</span></a></h1><p>把 Emacs 内置的快速指南过了一遍，GNU Emacs 官网上的文档没来得及看。接下来我要去看看 Emacs 的一款主题 Spacemacs。</p>',108))])}const m=d(t,[["render",n]]),u=JSON.parse('{"path":"/tools/note/Emacs%20%E5%85%A5%E9%97%A8(1).html","title":"Emacs 入门(1)","lang":"zh-CN","frontmatter":{"title":"Emacs 入门(1)","date":"2025-09-18T00:00:00.000Z","tags":["编辑器","Emacs"],"category":["代码效率"],"description":"学习 Emacs 内置文档 Emacs tutorial ，结合在线文档 A Guided Tour of Emacs。","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Emacs 入门(1)\\",\\"image\\":[\\"https://vip.123pan.cn/1844935313/obsidian/20250918084530894.png\\"],\\"datePublished\\":\\"2025-09-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-19T00:00:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"庸碌无常\\",\\"url\\":\\"https://pluinyiasnhg.top\\"}]}"],["meta",{"property":"og:url","content":"https://pluinyiasnhg.top/tools/note/Emacs%20%E5%85%A5%E9%97%A8(1).html"}],["meta",{"property":"og:site_name","content":"庸碌无常的博客"}],["meta",{"property":"og:title","content":"Emacs 入门(1)"}],["meta",{"property":"og:description","content":"学习 Emacs 内置文档 Emacs tutorial ，结合在线文档 A Guided Tour of Emacs。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vip.123pan.cn/1844935313/obsidian/20250918084530894.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-19T00:00:08.000Z"}],["meta",{"property":"article:tag","content":"Emacs"}],["meta",{"property":"article:tag","content":"编辑器"}],["meta",{"property":"article:published_time","content":"2025-09-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-19T00:00:08.000Z"}]]},"git":{"createdTime":1760832008000,"updatedTime":1760832008000,"contributors":[{"name":"pluinyiasnhg","username":"pluinyiasnhg","email":"pluinyiasnhg@gmail.com","commits":1,"url":"https://github.com/pluinyiasnhg"}]},"readingTime":{"minutes":15.72,"words":4716},"filePathRelative":"tools/note/Emacs 入门(1).md","excerpt":"\\n<p>学习 Emacs 内置文档 Emacs tutorial ，结合在线文档 <a href=\\"https://www.gnu.org/software/emacs/tour/index.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">A Guided Tour of Emacs</a>。</p>\\n","autoDesc":true}');export{m as comp,u as data};
