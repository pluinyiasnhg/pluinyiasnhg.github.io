import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,b as t,d as l,o as n}from"./app-BwpV5wgk.js";const c={};function r(p,s){return n(),a("div",null,[s[0]||(s[0]=e("h1",{id:"前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前言"},[e("span",null,"前言")])],-1)),s[1]||(s[1]=e("p",null,"把 Spacemacs 称为主题，完全是我的个人看法。原生的 Emacs 同样可以安装各种插件，实现 Spacemacs 的所有功能。但是插件不是动动小手下载下来就能用的，需要进行配置。而这就是 Spacemacs 的可贵之处。",-1)),s[2]||(s[2]=e("p",null,"有一个我在用的 Obsidian 插件，叫做 Spacekeys。该插件用于管理快捷键，插件的灵感来源就是 Spacemacs。这是我和 Spacemacs 最初的渊源。",-1)),t(" more "),s[3]||(s[3]=l(`<h1 id="安装主题" tabindex="-1"><a class="header-anchor" href="#安装主题"><span>安装主题</span></a></h1><p>因为事先已经安装过 Emacs，所以我首先把 Emacs 的配置文件 <code>~/.emacs.d</code> 删除了。除了简单粗暴的删除，也可以重命名备份一下。只不过我完全没有这种打算。</p><p>Spacemacs 为进行过配置的 Emacs 用户提供了继承之前配置的选择，具体参考 <a href="https://github.com/syl20bnr/spacemacs?tab=readme-ov-file#install" target="_blank" rel="noopener noreferrer">full installation</a>。</p><p>接着就是下载 Spacemac 仓库的 develop 分支，另一条分支 master 已经很久没更新了：</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 下载</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/syl20bnr/spacemacs</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/.emacs.d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Spacemacs 需要一些前置软件才能发挥所有功能：</p><ul><li><s>Emacs、git</s>，能下载和打开 Spacemacs 说明两者肯定已经安装到位了</li><li>Tar，安装和更新 Emacs 包所必需的</li><li><a href="https://fonts.google.com/specimen/Source+Code+Pro" target="_blank" rel="noopener noreferrer">Source Code Pro</a>，建议安装该字体，不然有警告</li><li><a href="https://github.com/BurntSushi/ripgrep" target="_blank" rel="noopener noreferrer">ripgrep</a>，搜索工具</li></ul><p>如果你像我一样选择在终端输入 <code>emacs -nw</code> 启动，状态栏可能显示不出来。这时候输入 <code>C-x b</code> 打开缓冲区 <code>*Messages*</code> ，查看启动以来的日志，找到错误信息：</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Spacemacs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Error</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> in</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dotspacemacs/init:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Variable:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;dotspacemacs-search-tools&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> has</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> value:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;(rg ag pt ack grep)&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> that</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> doesn’t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> match</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> its</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> type</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;(set (const rg) (const ag) (const ack) (const grep))&quot;.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Validator</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> message:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;(user-error Looking for \`(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> (const &quot;rg&quot;) (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">const</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ag&quot;) (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">con\\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">st &quot;ack&quot;) (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">const</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;grep&quot;))&#39; in \`(&quot;pt&quot;)&#39; failed because:                                                                                     </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> following values don&#39;t match any of the options:                                                                                     </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    pt)&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是用快捷方式 Emacs（Termial）启动，状态栏就显示正常。很奇怪。</p><p>解决方法是，打开 <code>~/.spacemacs.d/init.el</code> ，找到 dotspacemacs-search-tools ，把搜索工具 pt 删除。看注释的意思是，会优先选前面的搜索工具，如果没安装，就选下一个，理论上安装了 rg ，即 ripgrep 就不该报错。</p><h1 id="更新主题" tabindex="-1"><a class="header-anchor" href="#更新主题"><span>更新主题</span></a></h1><p>更新 Spacemacs 仓库：</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 关闭 emacs 并手动 git 更新</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rebasZe</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>更新软件包：\`M-x configuration-layer/update-packages</p><p>回滚软件包更新：<code>M-x configuration-layer/rollback</code></p><p><code>M-x</code> 是 Emacs 的命令前缀，在 Spacemacs 中可以用 <code>&lt;SPC&gt; &lt;SPC&gt;</code> 代替。</p><h1 id="阅读-init-el" tabindex="-1"><a class="header-anchor" href="#阅读-init-el"><span>阅读 init.el</span></a></h1><p>Spacemacs 接管了 <code>~/.emacs.d</code> ，我们不需要关心这个文件夹下面是怎样的——Spacemacs 为用户配置提供了 <code>~/.spacemacs.d</code> 文件夹。初次安装，只有一个 init.el 文件。</p><p>init.el 源代码有着丰富的注释，在开始正式攻略 Spacemacs 官方文档前，先耐心的翻看一遍，我会挑选一些设置进行记录。</p><p>init.el 的代码结构是由6个函数组成：</p><ul><li>dotspacemacs/layers：启用/禁用 layer 和软件包</li><li>dotspacemacs/init：在 Emacs 启动时加载，用于配置 Spacemacs</li><li>dotspacemacs/user-env：加载环境变量</li><li>dotspacemacs/user-init：初始化加载软件包所需的变量</li><li>dotspacemacs/user-config：用于添加个人的自定义配置、键绑定、函数定义等</li><li>dotspacemacs/emacs-custom-settings：Spacemacs 自动生成，用户不能改动</li></ul><p>user-env 函数默认加载 <code>~/.spacemacs.env</code> 文件，该文件下有各种 shell 中的环境变量，比如 conda 路径、Java jdk、shell 类型、proxy 地址等等。</p><p>函数的调用顺序为：init -&gt; user-init -&gt; layers -&gt; user-config -&gt; emacs-custom-settings。</p><p>主要查看前两个函数，user-env 没什么好看的，user-init 和 user-config 是用户自定义区域，初始为空。最后一个函数，是我在软件仓库（快捷键 <code>M-x list-packages</code> ）安装软件包时候，自动生成的。通过软件仓库安装的包，会被 .spacemacs.d 覆盖，所以看上去是装上了，实则没有，要在 <code>.spacemacs.d/init.el</code> 的 <code>additional-packages</code> 中添加包名。</p><h2 id="layers-函数" tabindex="-1"><a class="header-anchor" href="#layers-函数"><span>layers 函数</span></a></h2><blockquote><p>layer 是 Spacemacs 提供的一个抽象。Spacemacs 把一组功能联系紧密的插件放到一起，然后帮你配置好它的各种烦碎细节，给你提供总体上的某个功能。</p><p>比如说，auto-completion 层提供自动补全功能，org 层给你 org-mode 的良好使用体验，C/C++层能让你迅速把 Emacs 变成 C/C++的 IDE 等等。</p></blockquote><ul><li>enable-lazy-installation：延迟安装 layer</li><li>ask-for-lazy-installation：延迟安装某个 layer 前 Spacemacs 会请求确认</li><li>configuration-layer-path：加载其他路径下文件里的 layer</li><li><strong>configuration-layers</strong>：需要加载的 layer</li><li><strong>additional-packages</strong>：安装不在 layer 中的、额外的软件包</li><li>forzen-packages：设置某些包不更新</li><li>excluded-packages：不安装、不加载某些包</li><li>install-packages：设置安装包的逻辑</li></ul><p>install-packages 有三个选项：used-only、used-but-keep-unused、all。选项的区别在于如何对待不使用的包，是保留还是卸载。</p><h2 id="init-函数" tabindex="-1"><a class="header-anchor" href="#init-函数"><span>init 函数</span></a></h2><ul><li>gc-cons ：Spacemacs 的垃圾回收</li><li>use-spacelpa：软件仓库选择，Melpa 或者 Spacelpa</li><li>check-for-update：启动时检查 Spacemacs 是否有新版本</li><li><strong>editing-style</strong>：快捷键风格，有 vim、emacs、hybrid</li><li>以 startup 开头：设置启动页样式</li><li>startup-buffer-multi-digit-delay：等待按键延迟，默认0.4，建议0.2</li><li>scratch-buffer-persistent：<code>*scratch*</code> 缓冲区会自动保存</li><li>themes：主题</li><li>mode-line-theme：设置 Spaceline 主题</li><li><strong>default-font</strong>：设置字体样式。对终端运行的 Emacs 无效</li><li><strong>leader-key</strong>：Vim 按键风格，默认 <code>&lt;SPC&gt;</code></li><li><strong>emacs-command-key</strong>：设置 <code>M-x</code> 的别称，默认 <code>&lt;SPC&gt;</code></li><li><strong>ex-command-key</strong>：vim Ex 命令，默认 <code>:</code></li><li>emacs-leader-key：Emacs 按键风格使用 leader-key，默认 <code>M-m</code></li><li><strong>major-mode-leader-key</strong>：Vim 按键风格，默认 <code>,</code></li><li>major-mode-emacs-leader-key：Emacs 按键风格使用 mode-leader-key，默认 <code>M-&lt;RET&gt;</code></li><li>which-key-delay：which-key 面板出现延迟，默认0.4，建议0.2</li><li>which-key-position：which-key 面板的位置</li><li>loading-progress-bar：启动时显示 Emacs 加载进度条，会影响启动时间</li><li>fullscreen-at-startup：启动时 Emacs 全屏显示</li><li>maximized-at-startup：启动时 Emacs 最大化显示<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></li><li>line-numbers：显示行号</li><li>search-tools：文件搜索工具</li></ul><h1 id="quick-start" tabindex="-1"><a class="header-anchor" href="#quick-start"><span>Quick start</span></a></h1><ul><li><code>&lt;SPC&gt; f e d</code> ：打开 Spacemacs 用户配置文件，f 是 file，e 是 emacs，d 是 dotfile</li><li><code>&lt;SPC&gt; f e D</code> ：比较当前配置文件和初始配置文件，类似 git diff，D 是 Diff</li><li><code>&lt;SPC&gt; f e R</code> ：重新加载配置，R 是 Reload</li><li><code>&lt;SPC&gt; f f</code> ：打开/创建文件</li><li><code>&lt;SPC&gt; f r</code> ：<strong>访问最近打开的文件</strong>，r 是 recent</li><li><code>&lt;SPC&gt; f s</code> ：保存文件</li><li><code>&lt;SPC&gt; q q</code> ：退出 emacs，q 是 quit</li><li><code>&lt;SPC&gt; h T v</code> ：学习 evil 改编的 Vimtutor 教程，h 是help，T 是Tutorial，v 记作 vim</li><li><code>&lt;SPC&gt; ?</code> ：搜索忘记了的按键绑定，支持快捷键或命令搜索</li><li><code>&lt;SPC&gt; h d f</code> ：查看函数功能，d 记作 describe，f 是 function</li><li><code>&lt;SPC&gt; h d k</code> ：查看快捷键功能，k 是 key</li><li><code>&lt;SPC&gt; h d m</code> ：查看模式，m 是 mode</li><li><code>&lt;SPC&gt; h d v</code> ：查看变量，v 是 variable</li><li><code>&lt;SPC&gt; h d x</code> ：查看命令，x 是 ex-command</li><li><code>&lt;SPC&gt; w /</code> ：向右分屏，w 是 windows</li><li><code>&lt;SPC&gt; w -</code> ：向下分屏</li><li><code>&lt;SPC&gt; w d</code> ：删除当前窗格，d 是 delete</li><li><code>&lt;SPC&gt; 数字</code> ：切换到对应数字的窗格</li><li><code>&lt;SPC&gt; b s</code> ：打开缓冲区 <code>*scratch*</code> ，b 是 buffer</li><li><code>&lt;SPC&gt; &lt;TAB&gt;</code> ：在当前缓冲区和上一个<strong>缓冲区之间快速切换</strong></li><li><code>&lt;SPC&gt; b b</code> ：列出缓冲区</li><li><code>&lt;SPC&gt; b d</code> ：关闭当前缓冲区</li><li><code>&lt;SPC&gt; T n</code> ：切换主题，T 记作 Theme，n 记作 next</li><li><code>&lt;SPC&gt; &lt;SPC&gt;</code> ：<code>M-x</code> 的别称</li></ul><p>推荐一个 evil vim 中文版教程，<a href="https://github.com/clsty/evil-tutor-sc" target="_blank" rel="noopener noreferrer">evil-tutor-sc：简体中文的 Emacs Evil 实践式教程</a>。教程打开快捷键是 <code>M-x evil-tutor-sc-start-new</code> 。该插件提供了两个快捷键 <code>C-j</code> 和 <code>C-k</code> ，用来在每个小章节之间来回跳转。</p><p>相比较于一次按两个键的 <code>C-x</code> 和 <code>M-x</code> ，Spacemacs 将扩展命令分成两次输入，极大减轻了手指负担，第一次由强而有力的大拇指输入空格键，第二次输入的按键大部分都很好记，是某个单词的首字母，比如 f 是 file，w 是 windows，b 是 buffer，h 是 help等。</p><h1 id="配置-python-layer" tabindex="-1"><a class="header-anchor" href="#配置-python-layer"><span>配置 Python layer</span></a></h1><h2 id="后端选择" tabindex="-1"><a class="header-anchor" href="#后端选择"><span>后端选择</span></a></h2><p>有 Anaconda（默认）和 lsp (Language Server Protocol) 两种后端。lsp 后端需要使用语言服务器实现。</p><p>语言服务器也有两款，默认是 pylsp (python-lsp-server package) ，也可选择 pyright。</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python-lsp-server</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="语法检查" tabindex="-1"><a class="header-anchor" href="#语法检查"><span>语法检查</span></a></h2><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> flake8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="测试运行器" tabindex="-1"><a class="header-anchor" href="#测试运行器"><span>测试运行器</span></a></h2><p>默认是 pytest，也可选择 note。</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pytest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="清理没用到的导入" tabindex="-1"><a class="header-anchor" href="#清理没用到的导入"><span>清理没用到的导入</span></a></h2><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> autoflake</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="dap-mode-调试器" tabindex="-1"><a class="header-anchor" href="#dap-mode-调试器"><span>dap-mode 调试器</span></a></h2><p>仅适用于 lsp 后端：</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> debugpy</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 dap 调试的快捷键：<a href="https://github.com/syl20bnr/spacemacs/tree/develop/layers/%2Btools/dap#key-bindings" target="_blank" rel="noopener noreferrer">戳这</a></p><h2 id="笔记本和单元格" tabindex="-1"><a class="header-anchor" href="#笔记本和单元格"><span>笔记本和单元格</span></a></h2><p>在 Emacs 中编辑 Jupyter notebook，需要安装  <a href="https://github.com/mwouts/jupytext" target="_blank" rel="noopener noreferrer">jupytext</a>。</p><h2 id="管理虚拟环境" tabindex="-1"><a class="header-anchor" href="#管理虚拟环境"><span>管理虚拟环境</span></a></h2><p>pet（Python Executable Tracker）用于管理 Python 虚拟环境，自由切换到由 conda、venv等工具创建的虚拟环境。</p><p>但是我没整明白，怎么切换。按照教程装了一遍，发现没有出现切换环境的命令选项 <code>M-x pet-conda-switch-environment</code> 。</p><p>现把安装 pet 过程记录如下，方便日后检查哪里不对：</p><div class="language-zsh line-numbers-mode" data-highlighter="shiki" data-ext="zsh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-zsh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dasel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sqlite3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://vip.123pan.cn/1844935313/obsidian/20250920150338056.png" alt="~/.spacemacs.d/init.el" width="700" tabindex="0" loading="lazy"><figcaption>~/.spacemacs.d/init.el</figcaption></figure><h1 id="尾声" tabindex="-1"><a class="header-anchor" href="#尾声"><span>尾声</span></a></h1><p>有关主题 Spacemacs 的配置，我做的很粗糙。目前能想到要填的坑有：虚拟环境切换、查看函数和变量、跳转到函数内部、用 dap 进行 debug 调试。</p><p>现在的 Emacs 充其量就是一个文本编辑器，考虑在此之前我用的是 neovim，主题是 lazyvim，也是把 vim 当文本编辑器使用，所以在代码运行和调试这块，我相当不熟悉。</p><p>如果说要继续学习 Spacemacs，那么肯定还是从剩下未读的官方文档开始，比如 <a href="https://www.spacemacs.org/doc/DOCUMENTATION.html" target="_blank" rel="noopener noreferrer">Spacemacs documentation</a> 和 <a href="https://www.spacemacs.org/layers/LAYERS.html" target="_blank" rel="noopener noreferrer">Spacemacs layers list</a>。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>全屏显示开启后，最大化显示无效 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,65))])}const d=i(c,[["render",r]]),k=JSON.parse('{"path":"/tools/note/Emacs%20%E4%B8%BB%E9%A2%98%20Spacemacs.html","title":"Emacs 主题 Spacemacs","lang":"zh-CN","frontmatter":{"title":"Emacs 主题 Spacemacs","date":"2025-09-20T00:00:00.000Z","tags":["编辑器","Emacs"],"category":["代码效率"],"isOriginal":"true","description":"把 Spacemacs 称为主题，完全是我的个人看法。原生的 Emacs 同样可以安装各种插件，实现 Spacemacs 的所有功能。但是插件不是动动小手下载下来就能用的，需要进行配置。而这就是 Spacemacs 的可贵之处。 有一个我在用的 Obsidian 插件，叫做 Spacekeys。该插件用于管理快捷键，插件的灵感来源就是 Spacemac...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Emacs 主题 Spacemacs\\",\\"image\\":[\\"https://vip.123pan.cn/1844935313/obsidian/20250920150338056.png\\"],\\"datePublished\\":\\"2025-09-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-30T15:03:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"庸碌无常\\",\\"url\\":\\"https://pluinyiasnhg.top\\"}]}"],["meta",{"property":"og:url","content":"https://pluinyiasnhg.top/tools/note/Emacs%20%E4%B8%BB%E9%A2%98%20Spacemacs.html"}],["meta",{"property":"og:site_name","content":"庸碌无常的博客"}],["meta",{"property":"og:title","content":"Emacs 主题 Spacemacs"}],["meta",{"property":"og:description","content":"把 Spacemacs 称为主题，完全是我的个人看法。原生的 Emacs 同样可以安装各种插件，实现 Spacemacs 的所有功能。但是插件不是动动小手下载下来就能用的，需要进行配置。而这就是 Spacemacs 的可贵之处。 有一个我在用的 Obsidian 插件，叫做 Spacekeys。该插件用于管理快捷键，插件的灵感来源就是 Spacemac..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vip.123pan.cn/1844935313/obsidian/20250920150338056.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-30T15:03:42.000Z"}],["meta",{"property":"article:tag","content":"Emacs"}],["meta",{"property":"article:tag","content":"编辑器"}],["meta",{"property":"article:published_time","content":"2025-09-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-30T15:03:42.000Z"}]]},"git":{"createdTime":1758553982000,"updatedTime":1759244622000,"contributors":[{"name":"pluinyiasnhg","username":"pluinyiasnhg","email":"pluinyiasnhg@gmail.com","commits":3,"url":"https://github.com/pluinyiasnhg"}]},"readingTime":{"minutes":8.02,"words":2406},"filePathRelative":"tools/note/Emacs 主题 Spacemacs.md","excerpt":"\\n<p>把 Spacemacs 称为主题，完全是我的个人看法。原生的 Emacs 同样可以安装各种插件，实现 Spacemacs 的所有功能。但是插件不是动动小手下载下来就能用的，需要进行配置。而这就是 Spacemacs 的可贵之处。</p>\\n<p>有一个我在用的 Obsidian 插件，叫做 Spacekeys。该插件用于管理快捷键，插件的灵感来源就是 Spacemacs。这是我和 Spacemacs 最初的渊源。</p>\\n","autoDesc":true}');export{d as comp,k as data};
