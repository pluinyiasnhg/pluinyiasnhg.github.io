import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,a as t,b as a,d as i,e as o,o as l}from"./app-BAhMc8yK.js";const r={};function n(s,e){return l(),c("div",null,[e[0]||(e[0]=t("h1",{id:"前言",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#前言"},[t("span",null,"前言")])],-1)),e[1]||(e[1]=t("p",null,[o("Evil 是一个强大的 Vim 模拟，可以让 Vim 用户更容易过渡到 Emacs 使用上。从我个人使用体验来看，Vim 的模式设计十分好用，快捷键也更加精简，比如 "),t("code",null,"h、j、k、l"),o(" 移动方式怎么看都要比 "),t("code",null,"C-b C-p C-n C-f"),o(" 好使。能把 Vim 知识迁移过来重复利用，也是一方面原因。")],-1)),a(" more "),e[2]||(e[2]=i('<h1 id="evil-vim-文档" tabindex="-1"><a class="header-anchor" href="#evil-vim-文档"><span>Evil vim 文档</span></a></h1><h2 id="按键风格" tabindex="-1"><a class="header-anchor" href="#按键风格"><span>按键风格</span></a></h2><p><code>C-z</code> 控制 Spacemacs 两种按键风格的切换。比如在 Vim 风格键位中可以用 <code>&lt;ESC&gt;</code> 回到普通模式，但在 Emacs 风格键位中，<code>&lt;ESC&gt;</code> 做不到模式切换。</p><p>Evil vim 普通模式下，除了继承了 Vim 中的上下左右、前移一屏、后移一屏，还保留了 Emacs 中我喜欢用的 <code>C-l</code> ，效果是将光标所在行居中、居于最上、居于最下。虽然 Vim 的 <code>zz</code> 也可以实现居中，但功能还是少了点。</p><h2 id="相反动作" tabindex="-1"><a class="header-anchor" href="#相反动作"><span>相反动作</span></a></h2><p>圆满了，找到 <code>e</code> 的“反义词”了——其他反义词也顺手记录下：</p><ul><li><code>w</code> ：至单词末尾（反向动作： <code>b</code> ）</li><li><code>e</code> ：至单词末位字符（反向动作： <code>ge</code> ）</li><li><code>$</code> ：至行尾（反向动作： <code>0</code> 或 <code>^</code> ）</li><li><code>ce</code> ：更改一个单词的部分</li><li><code>p</code> ：这会将被删除的文本放置（put）在光标之后，若被删的是某一行，它会出现在光标的下一行（反向动作：<code>P</code> ）</li><li><code>/</code> ：向下搜索（反向动作：<code>?</code> ）</li><li><code>f</code> ：行内向前搜索（反向动作：<code>F</code> )</li><li><code>t</code> ：同 f ，但移动位置总是离目标差一个字符（反向动作：<code>T</code> ）</li></ul><p>Evi 默认为全小写的搜索忽略大小写。如果需要大小写敏感，可在末尾加 <code>\\C</code> 。</p><h2 id="批量替换" tabindex="-1"><a class="header-anchor" href="#批量替换"><span>批量替换</span></a></h2><ul><li><code>:s/old/new</code> ：替换<strong>行内第一个</strong>匹配对象</li><li><code>:s/old/new/g</code> ：替换<strong>行内全局</strong>（global）范围的对象</li><li><code>:#,#s/old/new/g</code> ：替换<strong>两行之间</strong>的所有匹配对象</li><li><code>:%s/old/new/g</code> ：替换<strong>整个缓冲区</strong>的所有匹配对象</li><li><code>:%s/old/new/gc</code> ：为了每次询问是否确认，添加 <code>c</code></li></ul><h2 id="开头的命令" tabindex="-1"><a class="header-anchor" href="#开头的命令"><span>: 开头的命令</span></a></h2><ul><li><code>:!</code> ：执行一个外部命令</li><li><code>:w</code> ：保存旧文件/新建新文件</li><li><code>:e</code> ：打开文件</li><li><code>:bd!</code> ：删除当前缓冲区</li></ul><p>用 v 进入可视状态后，选中指定区域，再输入 :w FILENAME 可将此区域保存到文件 FILENAME 中。</p><p><code>:r FILENAME</code> 取回磁盘文件 FILENAME 并将其插入当前缓冲区的光标位置之后，r 是 retrieve。</p><h2 id="大写字母" tabindex="-1"><a class="header-anchor" href="#大写字母"><span>大写字母</span></a></h2><ul><li><code>A</code> ：在<strong>行尾插入</strong></li><li><code>R</code> ：Vim 的替换状态，<strong>连续替换</strong>从光标开始的字符</li></ul><h2 id="复制" tabindex="-1"><a class="header-anchor" href="#复制"><span>复制</span></a></h2><ul><li><code>yy</code> ：复制一行</li><li><code>yw</code> ：<strong>复制一个单词</strong></li></ul><h1 id="vim-user-文档" tabindex="-1"><a class="header-anchor" href="#vim-user-文档"><span>Vim user 文档</span></a></h1><p>原文链接：<a href="https://www.spacemacs.org/doc/VIMUSERS.html" target="_blank" rel="noopener noreferrer">戳这</a>。该文档用于为 Vim 用户更好理解 Emacs 的各种概念。</p><h2 id="正如-vim" tabindex="-1"><a class="header-anchor" href="#正如-vim"><span>正如 Vim</span></a></h2><p>正如 Vim 有各种编辑模式，Emacs 用状态来区分不同文件和启用不同功能。一个 major-mode 对应一个文件类型，故一个缓冲区只能有一个 major-mode。要丰富该缓冲区的功能，就要用到各种 minor-mode。</p><p>正如 Vim 有各种插件可供安装，Emacs 使用 layer 。相比于 Vim 插件是一个个软件包，Emacs 的 layer 更像是整合包，里面有一组与 layer 关系密切的软件包。当然，Emacs 也提供像 Vim 一样安装单个软件包。</p><p>正如 Vim 有缓冲区，Emacs 也有，并且与缓冲区相关的快捷键都以 <code>&lt;SPC&gt; b</code> 为前缀：</p><ul><li><code>&lt;SPC&gt; b b</code> ：打开缓冲区列表</li><li><code>&lt;SPC&gt; b n</code> / <code>:bnext</code> ：切换到下个缓冲区，n 是 next</li><li><code>&lt;SPC&gt; b p</code> / <code>:bprevious</code> ：切换到上个缓冲区，p 是 previous</li><li><code>&lt;SPC&gt; b d</code> / <code>:bdelete</code> ：关闭当前缓冲区，d 是 delete</li><li><code>&lt;SPC&gt; b C-d</code> ：关闭除当前缓冲区外的所有缓冲区</li></ul><p>正如 Vim 有分屏，Emacs 也有类似的概念：窗格。与窗格相关的快捷键都以 <code>&lt;SPC&gt; w</code> 为前缀：</p><ul><li><code>&lt;SPC&gt; w v</code> / <code>:vsplit</code> ：向右分屏</li><li><code>&lt;SPC&gt; w s</code> / <code>:split</code> ：向下分屏</li><li><code>&lt;SPC&gt; w h/j/k/l</code> ：光标在窗格之间移动</li><li><code>&lt;SPC&gt; w H/J/K/L</code> ：移动窗格</li></ul><h2 id="帮助文档" tabindex="-1"><a class="header-anchor" href="#帮助文档"><span>帮助文档</span></a></h2><table><thead><tr><th>按键绑定</th><th>功能</th></tr></thead><tbody><tr><td><code>&lt;SPC&gt; h d f</code></td><td>查看函数</td></tr><tr><td><code>&lt;SPC&gt; h d k</code></td><td>查看按键绑定</td></tr><tr><td><code>&lt;SPC&gt; h d v</code></td><td>查看变量</td></tr><tr><td><code>&lt;SPC&gt; h &lt;SPC&gt;</code></td><td>列出所有 layer 文档</td></tr><tr><td><code>&lt;SPC&gt; &lt;f1&gt;</code></td><td>搜索命令、函数、变量并显示其文档</td></tr><tr><td><code>&lt;SPC&gt; ?</code></td><td>列出所有按键绑定</td></tr></tbody></table><p><code>&lt;SPC&gt; h &lt;SPC&gt;</code> 这个快捷键可以查看 Spacemacs 官网上几乎所有的文档，实现使用过程中随时查阅的效果，不用离开 Emacs。</p><h2 id="emacs-正则表达式" tabindex="-1"><a class="header-anchor" href="#emacs-正则表达式"><span>Emacs 正则表达式</span></a></h2><p>在正则表达式方面，Emacs 和 Vim 区别很大，以至于有人做了个工具，用于两种正则表达式互相转换，比如 <a href="https://github.com/joddie/pcre2el" target="_blank" rel="noopener noreferrer">pcre2el</a>。</p>',32))])}const h=d(r,[["render",n]]),g=JSON.parse('{"path":"/tools/note/Evil%20vim%20%E4%B8%8B%E7%9A%84%20Spacemacs.html","title":"Evil vim 下的 Spacemacs","lang":"zh-CN","frontmatter":{"title":"Evil vim 下的 Spacemacs","date":"2025-09-21T00:00:00.000Z","tags":["编辑器","Emacs"],"category":["代码效率"],"isOriginal":"true","description":"Evil 是一个强大的 Vim 模拟，可以让 Vim 用户更容易过渡到 Emacs 使用上。从我个人使用体验来看，Vim 的模式设计十分好用，快捷键也更加精简，比如 h、j、k、l 移动方式怎么看都要比 C-b C-p C-n C-f 好使。能把 Vim 知识迁移过来重复利用，也是一方面原因。","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Evil vim 下的 Spacemacs\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-21T15:06:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"庸碌无常\\",\\"url\\":\\"https://pluinyiasnhg.top\\"}]}"],["meta",{"property":"og:url","content":"https://pluinyiasnhg.top/tools/note/Evil%20vim%20%E4%B8%8B%E7%9A%84%20Spacemacs.html"}],["meta",{"property":"og:site_name","content":"庸碌无常的博客"}],["meta",{"property":"og:title","content":"Evil vim 下的 Spacemacs"}],["meta",{"property":"og:description","content":"Evil 是一个强大的 Vim 模拟，可以让 Vim 用户更容易过渡到 Emacs 使用上。从我个人使用体验来看，Vim 的模式设计十分好用，快捷键也更加精简，比如 h、j、k、l 移动方式怎么看都要比 C-b C-p C-n C-f 好使。能把 Vim 知识迁移过来重复利用，也是一方面原因。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-21T15:06:28.000Z"}],["meta",{"property":"article:tag","content":"Emacs"}],["meta",{"property":"article:tag","content":"编辑器"}],["meta",{"property":"article:published_time","content":"2025-09-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-21T15:06:28.000Z"}]]},"git":{"createdTime":1758467188000,"updatedTime":1758467188000,"contributors":[{"name":"pluinyiasnhg","username":"pluinyiasnhg","email":"pluinyiasnhg@gmail.com","commits":1,"url":"https://github.com/pluinyiasnhg"}]},"readingTime":{"minutes":3.9,"words":1171},"filePathRelative":"tools/note/Evil vim 下的 Spacemacs.md","excerpt":"\\n<p>Evil 是一个强大的 Vim 模拟，可以让 Vim 用户更容易过渡到 Emacs 使用上。从我个人使用体验来看，Vim 的模式设计十分好用，快捷键也更加精简，比如 <code>h、j、k、l</code> 移动方式怎么看都要比 <code>C-b C-p C-n C-f</code> 好使。能把 Vim 知识迁移过来重复利用，也是一方面原因。</p>\\n","autoDesc":true}');export{h as comp,g as data};
